* Dust trajectories in bow shocks
This is an extension of the models I have done in ~dust-wave.org~ from the Jorge bow shock project. 
+ 1d and 3d models for the trajectories of charged dust grains under 3 forces
  1. Radiation from a star
  2. Gas-grain drag
     - Stokes drag (solid body), important at supersonic relative speeds
     - Coulomb drag, peaks at roughly 10 km/s for ionized gas
  3. Lorentz force, couples grains to B-field
+ Main scenario considered is a stream of dusty plasma, incident on a star


* Drag force
+ Functional form from Draine & Salpeter
+ Calibrated from Cloudy models
  + Major contribution is from protons
  + But does include the minor contribution from electrons and helium ions
  + Electrons fill in the minimum around 100 km/s
  + Helium adds a shoulder to the peak around 5 km/s
+ Implemented in [[file:ds79.py]]
+ Note that it is normalized by the gas pressure and the grain cross-sectional area
** Test drag force
#+BEGIN_SRC python :results file :return pltfile
  import numpy as np
  import ds79
  from matplotlib import pyplot as plt
  import seaborn as sns

  pltfile = "test-Fdrag-exact.pdf"

  w = np.logspace(-1.5, 3.5, 200)

  fig, ax = plt.subplots()

  for phi in 0.25, 1.0, 4.0, 16.0:
      ax.plot(w, ds79.Fdrag(w, T=8000, phi=phi, n=100), label=rf"$\phi = {phi:.2f}$")
  ax.legend(title="Grain potential")
  ax.set(
      xscale="log",
      yscale="log",
      xlabel="Gas-grain velocity difference, $w$, km/s",
      ylabel=r"Drag force $/ (2 n k T) (\pi a^{2}) $",
  )
  sns.despine()
  fig.tight_layout()
  fig.savefig(pltfile)
#+END_SRC

#+RESULTS:
[[file:test-Fdrag-exact.pdf]]
** Components of drag force
+ Metal abundances for gas-phase ISM from Cloudy.  Here I list all elements with abundances higher than 1 part-per-million
  |    |         |         abun |  A |       abun*A |
  |----+---------+--------------+----+--------------|
  | C  | -3.5229 | 2.9998532e-4 | 12 | 3.5998238e-3 |
  | N  | -4.1549 | 7.0000316e-5 | 14 | 9.8000442e-4 |
  | O  | -3.3979 | 4.0003685e-4 | 16 | 6.4005896e-3 |
  | Ne | -4.2218 | 6.0006735e-5 | 20 | 1.2001347e-3 |
  | Mg | -5.5229 | 2.9998532e-6 | 24 | 7.1996477e-5 |
  | Si | -5.3979 | 4.0003685e-6 | 28 | 1.1201032e-4 |
  | S  | -5.0000 |         1e-5 | 32 |       3.2e-4 |
  | Ar | -5.5229 | 2.9998532e-6 | 40 | 1.1999413e-4 |
  | Fe | -5.5229 | 2.9998532e-6 | 56 | 1.6799178e-4 |
  |----+---------+--------------+----+--------------|
  |    |         |      0.00085 |    |         15.3 |
  #+TBLFM: $3=10**$-1::$5=$-1 $-2::@11$3=vsum(@I..@II);f5::@11$5=vsum(@I..@II)/$-2;f1
+ So, the total abundance is 8.5e-4 and the average mass is 15.3
  + We use these as an average metal collider in the graph
  + Assume metals are doubly ionized
  + Unsurprisingly, they make a negligible contribution

#+BEGIN_SRC python :results file :return pltfile
  import numpy as np
  import ds79
  from matplotlib import pyplot as plt
  import seaborn as sns

  pltfile = "test-Fdrag-components.pdf"

  w = np.logspace(-1.5, 3.5, 200)

  sns.set_color_codes()
  fig, ax = plt.subplots(figsize=(5, 4))

  colliders = ds79.DEFAULT_COLLIDERS + [ds79.Collider("CNO++", A=15.3, Z=2.0, abun=8.5e-4)]
  fdrag = ds79.Fdrag_components(w, T=8000, phi=10.0, n=100, colliders=colliders)

  colors = "rcmy"
  ftotal = np.zeros_like(w)
  for collider, color in zip(fdrag, colors):
      ax.plot(w, fdrag[collider][1], color=color, label=collider)
      ax.plot(w, fdrag[collider][0], color=color, ls='--', label="_nolabel_")
      ftotal += fdrag[collider][0] + fdrag[collider][1]
  ax.plot(w, ftotal, color="k", label="Total")
  ax.legend(title="Collider")
  ax.set(
      xscale="log",
      yscale="log",
      xlabel="Gas-grain velocity difference, $w$, km/s",
      ylabel=r"Drag force $/ (2 n k T) (\pi a^{2}) $",
  )
  sns.despine()
  fig.tight_layout()
  fig.savefig(pltfile)
#+END_SRC

#+RESULTS:
[[file:test-Fdrag-components.pdf]]
** Regimes in (v, \phi) space
#+BEGIN_SRC python :results file :return pltfile
  import numpy as np
  import ds79
  from matplotlib import pyplot as plt
  import seaborn as sns
  import matplotlib.patheffects as PathEffects

  pltfile = "test-Fdrag-param-space.pdf"

  w, phi = np.meshgrid(
      np.logspace(-1.5, 3.5, 200),
      np.logspace(-2.0, 2.0, 200)
  )

  sns.set_color_codes()
  fig, ax = plt.subplots(figsize=(5, 5))

  colliders = ds79.DEFAULT_COLLIDERS + [ds79.Collider("CNO++", A=15.3, Z=2.0, abun=8.5e-4)]
  fdict = ds79.Fdrag_components(w, T=8000, phi=phi, n=100, colliders=colliders)

  # Total solid body drag
  fEpstein = np.sum([f[0] for f in fdict.values()], axis=0)
  # Total solid body plus Coulomb
  fTotal = np.sum([f[0] + f[1] for f in fdict.values()], axis=0)

  frac_Epstein = fEpstein / fTotal
  frac_proton = fdict["proton"][1] / fTotal
  frac_electron = fdict["electron"][1] / fTotal


  ax.contourf(w, phi, frac_Epstein, [0.5, 0.6, 0.7, 1.0], alpha=1.0,
             cmap="Blues")
  ax.contourf(w, phi, frac_proton, [0.5, 0.6, 0.7, 1.0], alpha=1.0,
             cmap="Reds")
  ax.contourf(w, phi, frac_electron, [0.5, 0.6, 0.7, 1.0], alpha=1.0,
             cmap="Greens")
  cw = ax.contour(w, phi, fTotal,
                  [0.1, 1.0, 10.0, 100.0, 1.e3, 1.e4, 1.e5],
                  colors="w", alpha=0.7, linewidths=2.5)
  ck = ax.contour(w, phi, fTotal,
                  [0.1, 1.0, 10.0, 100.0, 1.e3, 1.e4, 1.e5],
                  colors="k", linewidths=0.5)

  # Place contour labels by hand
  for x, y, s in [
          [6, 0.015, r"1",  ],
          [100, 0.015, r"100",],
          [1000, 0.015, r"10\,000",],
  ]:
      ax.text(x, y, f"$f_{{\mathrm{{drag}}}} = {s} \,f_*$", color="k",
              ha="center", va="bottom", fontweight="black",
              rotation="vertical", 
              path_effects=[PathEffects.withStroke(linewidth=3,
                                                   alpha=0.7,
                                                   foreground="w")])


  ax.axvline(10.0, color="w", lw=3, ls=":")
  ax.axvline(420.0, color="w", lw=1.5, ls=":", ymin=0.75)
  for x, y, s in [
          [1.5, 0.04, "I",  ],
          [140.0, 0.3, "II",],
          [1.0, 10.0, "III",],
          [14.0, 20.0, "IV",],
          [120.0, 25.0, "V",],
  ]:
      ax.text(x, y, s, color="w", fontsize="xx-large", fontweight="black")

  ax.set(
      xscale="log",
      yscale="log",
      xlabel="Gas-grain velocity difference, $w$, km/s",
      ylabel=r"Grain potential, $|\phi|$",
  )
  sns.despine()
  fig.tight_layout()
  fig.savefig(pltfile)
#+END_SRC

#+RESULTS:
[[file:test-Fdrag-param-space.pdf]]


* On-axis 1d integration
+ As before, we normalize distances by the radiative turnaround radius
  + Velocities normalized by v_\infty
  + Times normalized by R_{**}/v_\infty
+ This means that the radiation force is just 1/2 in dimensionless units

#+BEGIN_SRC python :eval no :tangle test-stream-1d.py
  import sys
  import numpy as np
  from scipy.integrate import odeint
  from matplotlib import pyplot as plt
  import seaborn as sns
  import duststream as ds


  try: 
      STAR = sys.argv[1]
      VINF = float(sys.argv[2])
      LOGN = float(sys.argv[3])
      GRAIN = sys.argv[4]
      A = float(sys.argv[5])
  except:
      print(f"Usage: {sys.argv[0]} L4 VINF LOGN GRAIN A [ZOOM]")

  try: 
      ZOOM = float(sys.argv[6])
  except:
      ZOOM = 1.0


  L4 = {
      "MS10": 0.64,
      "MS20": 5.45,
      "MS40": 22.2,
      "BSG": 30.2,
  }
  eta = {
      "MS10": 0.0066,
      "MS20": 0.1199,
      "MS40": 0.4468,
      "BSG": 0.3079,
  }


  # Set minor parameters according to star and grain type
  Tgas = {
      "MS10": 8000.0,
      "MS20": 9000.0,
      "MS40": 1e4,
      "BSG": 8000.0,
  }

  if GRAIN == "gra":
      rho_d = 2.2
      if STAR in ["MS10", "BSG"]:
          phi_norm = 1.0
      else:
          phi_norm = 1.5
  else:
      rho_d = 3.5
      if STAR in ["MS10", "BSG"]:
          phi_norm = 0.7
      else:
          phi_norm = 1.4




  # Initial conditions
  Rstart = 2.5/ZOOM
  y0 = [Rstart, -1.0]

  stream = ds.DustStream(L4=L4[STAR], vinf=VINF, n=10**LOGN, a=A,
                         eta=eta[STAR], T=Tgas[STAR], phi_norm=phi_norm, rho_d=rho_d)

  streamid = f"{STAR}-v{int(VINF):03d}-n{int(10*LOGN):+02d}-{GRAIN}{int(100*A):03d}"

  figfile = sys.argv[0].replace('.py', f'-{streamid}.pdf')

  # Time grid
  t = np.linspace(0.0, 10.0/ZOOM, 5001)
  soln = odeint(ds.dydt_1d, y0, t, args=(stream,))
  t0 = t[soln[:, 1] >= 0.0].min()

  # Slippage velocity
  w = 1.0 + soln[:, 1]
  # Drift velocity
  # wdrift = 1.0 / alpha / soln[:, 0]

  sns.set_style('ticks')
  sns.set_color_codes('deep')
  fig, (ax, axp) = plt.subplots(2, 1, figsize=(4, 6))
  ax.plot(t - t0, soln[:, 0], label='$R/R_{0}$', zorder=3, lw=0.5)
  ax.plot(t - t0, soln[:, 1], label='$v / v_{\infty}$', lw=0.5)
  #ax.plot(t - t0, wdrift, ls='--', label='$w_\mathrm{drift} / v_{\infty}$')

  # ax.axhline(1.0/alpha, ls=':', color='k', lw=0.8)
  ax.axhspan(0.0, 1.0, color='k', alpha=0.1)
  ax.legend(loc="lower left")
  ax.set(
      xlabel=r'Time / $(R_{0} / v_{\infty})$',
      ylim=[-1.1, 2.1]
  )
  t2 = np.linspace(0.0, 20.0, 201)

  R1, R2 = 2e-4, 20.0

  x1, x2 = R1/stream.Rstarstar, R2/stream.Rstarstar
  w1, w2 = 0.03/stream.vinf, 2000.0/stream.vinf

  xpts = np.logspace(np.log10(x1), np.log10(x2), 151)
  wpts = np.logspace(np.log10(w1), np.log10(w2), 101)

  agrid = ds.total_accel(xpts[None, :], stream.vinf*wpts[:, None], stream)


  # Add dimensions back in for plotting
  xpts *= stream.Rstarstar
  x1 *= stream.Rstarstar
  x2 *= stream.Rstarstar

  wpts *= stream.vinf
  w1 *= stream.vinf
  w2 *= stream.vinf

  axp.contour(xpts, wpts, agrid, [0.0], linewidths=3, linestyles=":", colors="m")
  for z, cmap, dex in [[np.log10(agrid), "Blues", 10.0],
                       [np.log10(-agrid), "Reds", 4.0]]: 
      axp.contourf(xpts, wpts, z,
                   10, #[-0.5, 0.0, 0.5, 1.0, 1.5, 2.0],
                   vmax=np.nanmax(z), vmin=np.nanmax(z)-dex,
                   cmap=cmap)

  axp.plot(soln[:, 0]*stream.Rstarstar, w*stream.vinf, lw=4, color="w", alpha=0.5)
  axp.plot(soln[:, 0]*stream.Rstarstar, w*stream.vinf, lw=2, color="k", alpha=1.0)
  axp.axhline(stream.vinf, color='k', lw=0.5)
  axp.axvline(stream.Rstarstar, color='k', lw=0.5)
  axp.axvline(stream.R0, color='r', lw=2, ls="--")
  axp.set(xlabel='$R$, pc', ylabel='$w$, km/s',
          xlim=[x1, x2], ylim=[w1, w2],
          xscale="log", yscale="log",
          xticks=0.5*np.arange(7),
          yticks=[-1.0, -0.5, 0., 0.5, 1.0, 1.5])

  sns.despine()
  fig.tight_layout()
  fig.text(0.02, 0.97, '(a)')
  fig.text(0.02, 0.5, '(b)')
  fig.savefig(figfile)
  print(figfile, end='')

#+END_SRC

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 20 -2 gra 0.02
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v020-n-20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 10 -2 gra 0.02
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v010-n-20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 10 -2 gra 0.2
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v010-n-20-gra020.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 10 -2 sil 0.2
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v010-n-20-sil020.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 5 -2 gra 0.2
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v005-n-20-gra020.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 5 -2 sil 0.2
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v005-n-20-sil020.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 5 -2 sil 0.5
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v005-n-20-sil050.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 50 4 sil 0.5
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v050-n+40-sil050.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 100 4 sil 0.5
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v100-n+40-sil050.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 100 4 sil 0.2
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v100-n+40-sil020.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 100 4 sil 0.02
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v100-n+40-sil002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS20 20 -2 gra 0.02
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS20-v020-n-20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS40 20 -2 gra 0.02
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS40-v020-n-20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py BSG 20 -2 gra 0.02
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-BSG-v020-n-20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 20 -1.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v020-n-10-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 20 0.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v020-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 40 0.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v040-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 60 0.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v060-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 80 0.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v080-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 100 0.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v100-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 150 0.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v150-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 60 1.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v060-n+10-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 80 1.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v080-n+10-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 100 1.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v100-n+10-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 150 1.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v150-n+10-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 200 1.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v200-n+10-gra002.pdf]]


#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 150 2.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v150-n+20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 150 3.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v150-n+30-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 150 4.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v150-n+40-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 60 2.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v060-n+20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 40 2.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v040-n+20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 60 3.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v060-n+30-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 60 3.0 gra 0.2 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v060-n+30-gra020.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 60 3.0 sil 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v060-n+30-sil002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 60 3.0 sil 0.2 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v060-n+30-sil020.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 60 4.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v060-n+40-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 60 4.0 gra 0.5 
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v060-n+40-gra050.pdf]]


#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 150 3.0 gra 0.2 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v150-n+30-gra020.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 150 3.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v150-n+30-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS20 150 1.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS20-v150-n+10-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS40 150 1.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS40-v150-n+10-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS40 150 1.0 gra 0.2 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS40-v150-n+10-gra020.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS40 150 1.0 gra 0.5 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS40-v150-n+10-gra050.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS40 50 1.0 gra 0.5 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS40-v050-n+10-gra050.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS40 20 1.0 gra 0.5 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS40-v020-n+10-gra050.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS40 300 1.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS40-v300-n+10-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS40 300 0.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS40-v300-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS40 500 0.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS40-v500-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS20 300 0.0 gra 0.02 1.0
#+END_SRC

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS20 300 0.0 gra 0.01 
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS20-v300-n+0-gra001.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS20 500 0.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS20-v500-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS20 500 1.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS20-v500-n+10-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS20 500 2.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS20-v500-n+20-gra002.pdf]]

** Initial impressions
+ There are at least 4 parameters:
  + L4, v, n, a
  + [X] In principle \phi should be determined self-consistently
    + Now done
  + Everything else is minor: \rho_d, Q_p
+ For v_\infty in range 11 \to 80 km/s, we get the limit cycle behavior:
  + Dust is swept in past R_{** }and follows drift velocity
  + Gets turned around and shoots out
    + For v ~ 20 km/s we can go out at twice velocity that we came in, so that w = 60 km/s since that is right in the middle of the trough in the drag force
    + src_python{ds.DustStream(vinf=20, phi=15.0, a=0.04, L4=0.63, n=1.0e-1)}
  + Decelerated by electron drag while w is of order 2 v_\infty
  + Sudden deceleration and total re-coupling by proton drag when w falls to about 20 km/s 


** Functional dependence of the trajectory parameters
+ The net force map
  + The zero-contour at least does not depend on a or v
+ Grain size effects
  + Increasing size, a, reduces R_{\star\star} because \kappa_d = Q_P \sigma/m = 3 Q_p/(4 a \rho_d) is reduced and R_{\star\star} \prop \kappa_d L / v^2
  + But it does not effect equilibrium R because that is just the radius where w_drift = v
  + Does slightly effect minimum R because there is an overshoot below sonic drift radius R_sd (where w_drift = 10 km/s), which does depend on \sigma/m
+ Velocity effects
  + We can move from the damped v > 80 to oscillatory 11 < v < 80 to damped again v < 10  regimes, but this does not change the dust wave radius in physical units much
  + As velocity goes up, bowshock/wave radius R_0 gets smaller, so that dust wave separates
    + For instance ~MS10 (20,40,60,80) 0.0 gra 0.02~
    + At 20 km/s, R_0 is bigger than R_DW so there is no dust wave
    + At 40 km/s and greater, R_0 is smaller so the dust wave can form
    + As v increases, oscillations get floppier
      + Albeit, only in terms of R_{\star\star} - they are more or less the same in terms of R_SD
    + Finally, at 80 km/s we pass over to the damped oscillations
+ Density effects
  + As we increase the density, we reduce R_0 and R_SD
    + So minimum velocity for DW is little changed
    + [X] But how exactly does R_SD change with density?
      + It is at a fixed radiation parameter, \Xi = P_rad / P_gas
  + But R_{\star\star} is unchanged
    + so the oscillations get tighter since R_SD / R_{\star\star} is smaller
  + [X] /Speculation:/ at high enough density, we get into BW regime, where R_0 is also independent of density - in which case DW will merge in to BW (like when \alpha_drag > 100 in previous model)
    + This does seem to be true, but needs to be quantified more carefully
** Grain potential versus U_P (aka \Upsilon_P, aka \Xi)
+ This is roughly logarithmic
+ Graph in ~cloudy-dust-charging~ project
  + [[file:~/Dropbox/cloudy-dust-charging/phi-pratio.pdf]]
+ Reasonable approximation
  * \(\phi = 1.5 \log(U_{P}_{}/0.1) = 1.5 \bigl( \log(U_{P}_{}) + 2.3 \bigr)\)
    |   U_P |    \phi |
    |------+------|
    | 0.01 | -3.5 |
    |  0.1 | -0.0 |
    |    1 |  3.5 |
    |   10 |  6.9 |
    |  100 | 10.4 |
    | 1000 | 13.8 |
    |  1e4 | 17.3 |
    #+TBLFM: $2=1.5 log($1) + 3.45 ; %.1f
+ The above function is good for MS10 and BSG with carbon grains
  + Stellar type: hard spectrum (MS20, MS40) is about 1.5 times higher
  + Grain type: Si grains are about 1.5 times lower
+ Upsilon \Upsilon 𝚼 𝛶
+ Xi Ξ 𝛯 𝝣
+ R_\dag is the rip point, when P_rad/P_gas = \Xi_\dag
+ What would be a good replacement for \star\star?
  + R_\S or R_\subset or R_\supset or R_\wedge or R_\Leftrightarrow or R_\sim or R_\cap or \(R_\leadsto\) or \(R_{\Updownarrow}\) or \(R_{\hookrightarrow}\)
  + Not convinced by any of them
** Library for on-axis trajectories: ~onaxis_traject.py~
#+BEGIN_SRC sh
mkdir data
mkdir figs
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS20 500 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS20-v500-n+20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 50 4.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v050-n+40-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 50 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v050-n+30-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 50 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v050-n+20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 300 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v300-n+20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 300 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v300-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 150 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v150-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 100 1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v100-n+10-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 100 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v100-n+20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 100 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v100-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 80 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v080-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 60 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v060-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 40 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v040-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 20 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v020-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 20 -1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v020-n-10-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 20 -3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v020-n-30-gra002.pdf]]

Very small grain
#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 80 4.0 gra 0.002
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v080-n+40-gra000.pdf]]

** Do plots of radii versus density

#+BEGIN_SRC sh :results file
python onaxis-stats-plot.py MS20 v300 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-stats-plot-MS20-v300-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-stats-plot.py MS20 v100 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-stats-plot-MS20-v100-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-stats-plot.py MS40 v500 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-stats-plot-MS40-v500-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-stats-plot.py MS10 v040 gra020
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-stats-plot-MS10-v040-gra020.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-stats-plot.py MS10 v040 sil002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-stats-plot-MS10-v040-sil002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-stats-plot.py MS10 v040 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-stats-plot-MS10-v040-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-stats-plot.py MS10 v080 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-stats-plot-MS10-v080-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-stats-plot.py MS10 v020 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-stats-plot-MS10-v020-gra002.pdf]]

** Normalize all radii by R_*
#+BEGIN_SRC sh :results file
python onaxis-norm-plot.py MS10 v080 sil002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-norm-plot-MS10-v080-sil002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-norm-plot.py MS10 v080 gra020
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-norm-plot-MS10-v080-gra020.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-norm-plot.py MS10 v080 sil000
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-norm-plot-MS10-v080-sil000.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-norm-plot.py MS10 v080 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-norm-plot-MS10-v080-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-norm-plot.py MS10 v040 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-norm-plot-MS10-v040-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-norm-plot.py MS10 v100 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-norm-plot-MS10-v100-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-norm-plot.py MS10 v300 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-norm-plot-MS10-v300-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-norm-plot.py MS20 v300 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-norm-plot-MS20-v300-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-norm-plot.py MS40 v500 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-norm-plot-MS40-v500-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-norm-plot.py MS40 v300 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-norm-plot-MS40-v300-gra002.pdf]]



** Plot impulse of f_drag during trajectory
#+BEGIN_SRC sh :results file
python onaxis-impulse.py MS10 50 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-impulse-MS10-v050-n+30-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-impulse.py MS10 80 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-impulse-MS10-v080-n+30-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-impulse.py MS10 80 4.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-impulse-MS10-v080-n+40-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-impulse.py MS10 40 4.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-impulse-MS10-v040-n+40-gra002.pdf]]

* TODO Make some videos of the phase space trajectories

* DONE 3d trajectories
CLOSED: [2018-05-09 Wed 18:13]
+ Actually 2D in non-magnetic case, since each trajectory is a plane curve


V = 80 and n = 10

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 80 1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v080-n+10-gra002-Y0001.pdf]]

V = 60 and n = 10, at a load of different Y0

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 60 1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+10-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.1 MS10 60 1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+10-gra002-Y0100.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.3 MS10 60 1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+10-gra002-Y0300.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.4 MS10 60 1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+10-gra002-Y0400.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.5 MS10 60 1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+10-gra002-Y0500.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.6 MS10 60 1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+10-gra002-Y0600.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 1.0 MS10 60 1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+10-gra002-Y1000.pdf]]

V = 60 and n = 1

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 60 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+00-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.01 MS10 60 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+00-gra002-Y0010.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.1 MS10 60 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+00-gra002-Y0100.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.3 MS10 60 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+00-gra002-Y0300.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.4 MS10 60 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+00-gra002-Y0400.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.5 MS10 60 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+00-gra002-Y0500.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.6 MS10 60 0.0 gra 0.02
#+END_SRC

V = 40 and n = 1  

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 40 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v040-n+00-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.1 MS10 40 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v040-n+00-gra002-Y0100.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.1 MS10 40 0.0 sil 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v040-n+00-sil002-Y0100.pdf]]

V = 100 and n = 1

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 100 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+00-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.1 MS10 100 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+00-gra002-Y0100.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.3 MS10 100 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+00-gra002-Y0300.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.45 MS10 100 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+00-gra002-Y0450.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.5 MS10 100 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+00-gra002-Y0500.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.52 MS10 100 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+00-gra002-Y0520.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.6 MS10 100 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+00-gra002-Y0600.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.7 MS10 100 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+00-gra002-Y0700.pdf]]

Higher density

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 100 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+20-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.1 MS10 100 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+20-gra002-Y0100.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.3 MS10 100 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+20-gra002-Y0300.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.4 MS10 100 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+20-gra002-Y0400.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.5 MS10 100 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+20-gra002-Y0500.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.6 MS10 100 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+20-gra002-Y0600.pdf]]


Even higher density

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 100 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v100-n+30-gra002.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.0 MS10 100 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+30-gra002-Y0000.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 100 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+30-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.1 MS10 100 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+30-gra002-Y0100.pdf]]


Lower velocity, higher density

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 60 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+30-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 40 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v040-n+30-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 40 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v040-n+20-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.1 MS10 40 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v040-n+20-gra002-Y0100.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.3 MS10 40 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v040-n+20-gra002-Y0300.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.5 MS10 40 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v040-n+20-gra002-Y0500.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 40 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v040-n+00-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.1 MS10 40 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v040-n+00-gra002-Y0100.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.3 MS10 40 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v040-n+00-gra002-Y0300.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.5 MS10 40 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v040-n+00-gra002-Y0500.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 50 1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v050-n+10-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 50 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v050-n+00-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 50 -1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v050-n-10-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 55 -1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v055-n-10-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 60 -1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n-10-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 65 -1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v065-n-10-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 70 -1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v070-n-10-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 70 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v070-n+00-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.1 MS10 70 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v070-n+00-gra002-Y0100.pdf]]

Bigger grain

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 70 0.0 gra 0.2
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v070-n+00-gra020-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 100 0.0 gra 0.2
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+00-gra020-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 200 2.0 gra 0.2
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v200-n+20-gra020-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 200 4.0 gra 0.2
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v200-n+40-gra020-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.1 MS10 150 4.0 sil 0.2
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v150-n+40-sil020-Y0100.pdf]]



** Maps of the 2d trajectories


#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 70 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v070-n+00-gra002.pdf]]

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 70 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v070-n+30-gra002.pdf]]

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 60 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v060-n+30-gra002.pdf]]

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 150 3.0 gra 0.02
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 300 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v300-n+30-gra002.pdf]]


#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 150 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v150-n+20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 100 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v100-n+20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 80 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v080-n+20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 60 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v060-n+20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 40 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v040-n+20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 40 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v040-n+00-gra002.pdf]]

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 100 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v100-n+30-gra002.pdf]]

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 100 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v100-n+00-gra002.pdf]]

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 100 -1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v100-n-10-gra002.pdf]]

Looking at the sequence of 1e3 pcc models, the inner radius stays the same, but the outer radius reduces as velocity increases. 

Smaller dust grains - sticks more closely to R_\dag and R_drift

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 60 2.0 gra 0.002
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v060-n+20-gra000.pdf]]

Larger dust grains - penetrate in deeper and bounce out further 

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 60 2.0 gra 0.2
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v060-n+20-gra020.pdf]]

Silicate grains instead of graphite - has about 1.7 times the radius.  Otherwise, similar.  Also, take an unconscionably long time to run. 

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 60 2.0 sil 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v060-n+20-sil002.pdf]]


* TODO Adding the Lorentz force
+ First do the guiding center approximation for Larmor radius \to 0
+ Implemented in [[file:frozen_trajectory.py]]
+ Testing if it is working

#+BEGIN_SRC sh :results file
 python frozen_trajectory.py MS10 60 2.0 gra 0.02 0.0 0.53 0.0
#+END_SRC

#+RESULTS:
[[file:figs/frozen-Y0530-Z0000-MS10-v060-n+20-gra002-th000.pdf]]

+ Now do maps like before
  + Implemented in [[file:frozen-stream-map.py]]
  + Takes a long time to run
+ And movies
  + Implemented in [[file:frozen-stream-movie.py]]

** Looking at the 90 degree case
+ drag-confined example
  + [[file:frozen-stream-map-MS10-v060-n+20-gra002-th090-Z0000.pdf]]
+ inertia-confined example
  + [[file:frozen-stream-map-MS10-v400-n+00-gra002-th090-Z0000.pdf]]
** Inertia-confined magnetic dust wave
+ This has an analytic solution for \theta_B = 0
+ But for \theta_B = 90, the ODE is much gnarlier
*** Parallel case: \theta_B = 0

#+BEGIN_SRC python :eval no :tangle bpara-density.py
  import sys
  import numpy as np
  from matplotlib import pyplot as plt
  import seaborn as sns

  dx = dy = 0.01
  xmin, xmax = -3.0, 3.0
  ymin, ymax = -1.5, 3.5
  # xmin, xmax = -2.0, 2.0
  # ymin, ymax = -0.2, 1.5
  x, y = np.meshgrid(
      np.arange(xmin, xmax, dx),
      np.arange(ymin, ymax, dx)
  )
  R = np.hypot(x, y)
  rho = 1/np.sqrt(1 - 1/R)
  rho[y**2 < 1] = 2.0*rho[y**2 < 1]
  rho[(y**2 < 1) & (x < 0)] = 0.0
  rho[R <= 1] = 0.0

  figfile = sys.argv[0].replace(".py", ".png")
  sns.set_color_codes()
  fig, ax = plt.subplots(figsize=(5, 4))

  ax.imshow(rho, origin='lower', extent=[xmin, xmax, ymin, ymax],
            vmin=0.0, vmax=10.0, cmap='gray_r')

  ax.axhline(0.0, color="k", alpha=0.5, lw=0.3)
  ax.axvline(0.0, color="k", alpha=0.5, lw=0.3)
  ax.plot(0.0, 0.0, "*", color="r", ms=6)

  ax.set_aspect("equal")
  ax.set(xlim=[xmin, xmax], ylim=[ymin, ymax],
         xlabel="$x / R_{**}$", ylabel="$y / R_{**}$")
  sns.despine()
  fig.tight_layout()
  fig.savefig(figfile, dpi=600)
  print(figfile, end="")

#+END_SRC

#+BEGIN_SRC sh :results file
  python bpara-density.py
#+END_SRC

#+RESULTS:
[[file:bpara-density.png]]


*** Perpendicular case: \theta_B = 90
#+BEGIN_SRC python :tangle bperp-ode.py :eval no
  import sys
  import numpy as np
  from scipy.integrate import odeint
  from matplotlib import pyplot as plt
  import seaborn as sns


  def rhs(y, t):
      """Right-hand side of ODE"""
      ydot = y[1]
      ydotdot = 0.5 * y[0] / (y[0]**2 + t**2)**1.5
      return ydot, ydotdot

  def trajectory(tgrid, y0, ydot0=0):
      """Find dust grain trajectory tied to B field - no drag"""
      soln = odeint(rhs, [y0, ydot0], tgrid)
      return soln[:, 0], soln[:, 1]

  def tfit(y0):
      return 2000*np.log10(10000/y0)**-5
  def afit(y0):
      return 1e-5*np.log10(3000/y0)**8.5

  figfile = sys.argv[0].replace(".py", ".pdf")

  y0min = 1e-3
  y0max = 50.0
  ny0 = 301
  y0grid = np.logspace(np.log10(y0min), np.log10(y0max), ny0)

  nt = 200001

  fig, ax = plt.subplots(figsize=(5, 4))
  vmax, tmax, twidth, yamax, amax = [], [], [], [], []
  for y0 in y0grid:
      tscale = 50*tfit(y0)
      tgrid = np.linspace(-200, 200, nt)
      tgrid = np.linspace(-tscale, tscale, nt)
      y, v = trajectory(tgrid, y0)
      a = np.gradient(v, tgrid)
      i0 = a.argmax()
      tmax.append(-tgrid[i0])
      vmax.append(v[-1])
      yamax.append(y[i0] - y0)
      amax.append(a.max())
      t1 = tgrid[np.argmin(np.abs(a[:i0] - 0.5*a.max()))]
      t2 = tgrid[i0:][np.argmin(np.abs(a[i0:] - 0.5*a.max()))]
      twidth.append(t2 - t1)


  x = y0grid
  ax.plot(x, amax, label=r"$a_{\mathrm{max}}$")
  ax.plot(x, vmax, label=r"$v_{\mathrm{final}}$")
  ax.plot(x, yamax, label=r"$y(a_{\mathrm{max}}) - y_{0}$")
  ax.plot(x, tmax, label=r"$-t(a_{\mathrm{max}})$")
  ax.plot(x, twidth, label=r"$\Delta t$")
  ax.plot(x, np.array(amax)*np.array(twidth),
          label=r"$a_{\mathrm{max}} \times \Delta t$")
  # ax.plot(x, tfit(y0grid), lw=0.2, label="_nolabel_")
  # ax.plot(x, afit(y0grid), lw=0.2, label="_nolabel_")
  ax.axhline(1.0, alpha=0.4, color="k", lw=0.3)
  ax.axvline(1.0, alpha=0.4, color="k", lw=0.3)
  #ax.legend(fontsize="small", ncol=2)
  ax.set(xscale="log", yscale="log", xlabel="impact parameter, $y_{0}$")

  sns.despine()
  fig.tight_layout()
  fig.savefig(figfile)

  print(figfile, end="")
#+END_SRC


#+BEGIN_SRC sh :results verbatim
  python bperp-ode.py
#+END_SRC

#+RESULTS:
#+begin_example
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.6084721674368D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.6084721674368D+01   r2 = -0.5706669253773D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.6223349663386D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.6223349663386D+01   r2 = -0.5842960622373D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.6365785002098D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.6365785002098D+01   r2 = -0.5982993100762D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.6586846113154D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.6586846113154D+01   r2 = -0.6200322154773D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.6662572477681D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.6662572477681D+01   r2 = -0.6274769584164D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.6817183501484D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.6817183501484D+01   r2 = -0.6426769049296D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.7139523924276D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.7139523924276D+01   r2 = -0.6743665181152D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.7480328064833D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.7480328064833D+01   r2 = -0.7078717263879D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.7568557971589D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.7568557971589D+01   r2 = -0.7165459162880D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.7748793798991D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.7748793798991D+01   r2 = -0.7342657110923D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.8028905065072D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.8028905065072D+01   r2 = -0.7618052691476D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.9054603460680D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.9054603460680D+01   r2 = -0.8626556675583D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.9626190796104D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.9626190796104D+01   r2 = -0.9188620137524D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1024162831154D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1024162831154D+02   r2 = -0.9793853195680D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1050095832636D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1050095832636D+02   r2 = -0.1004889904922D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1076820822866D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1076820822866D+02   r2 = -0.1031174369178D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1132761386325D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1132761386325D+02   r2 = -0.1086195990376D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1192225751219D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1192225751219D+02   r2 = -0.1144688111442D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1470905432332D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1470905432332D+02   r2 = -0.1418868026101D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1573610407175D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1573610407175D+02   r2 = -0.1519934760117D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1617088925200D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1617088925200D+02   r2 = -0.1562722459704D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1756451162596D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1756451162596D+02   r2 = -0.1699879790716D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1831522445357D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1831522445357D+02   r2 = -0.1773768468391D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1965387064744D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1965387064744D+02   r2 = -0.1905531440363D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1993551562844D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1993551562844D+02   r2 = -0.1933254739725D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.2111165862674D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.2111165862674D+02   r2 = -0.2049029502022D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.2173089673548D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.2173089673548D+02   r2 = -0.2109986324762D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.2303605662054D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.2303605662054D+02   r2 = -0.2238466532584D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.2443642111795D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.2443642111795D+02   r2 = -0.2376320538465D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.2755638712083D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.2755638712083D+02   r2 = -0.2683451826854D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.2884824849609D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.2884824849608D+02   r2 = -0.2810618798514D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.2974995048976D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.2974995048976D+02   r2 = -0.2899377075046D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.3770937603464D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.3770937603464D+02   r2 = -0.3682712665512D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.4024863639402D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.4024863639402D+02   r2 = -0.3932544862313D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.4228849910689D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.4228849910689D+02   r2 = -0.4133211992228D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.4299587026681D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.4299587026681D+02   r2 = -0.4202791431674D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.5362005517990D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.5362005517990D+02   r2 = -0.5247368200535D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.5750530788160D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.5750530788160D+02   r2 = -0.5629141443055D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.6398690390272D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.6398690390271D+02   r2 = -0.6265752439701D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.6515066753959D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.6515066753959D+02   r2 = -0.6380017189827D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.6633992297133D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.6633992297133D+02   r2 = -0.6496772852247D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.7006727522356D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.7006727522356D+02   r2 = -0.6862628622964D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.7136523178412D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.7136523178412D+02   r2 = -0.6990000743503D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.7830489017509D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.7830489017509D+02   r2 = -0.7670765787134D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.8607028873860D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.8607028873860D+02   r2 = -0.8432055857209D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.8773242858882D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.8773242858882D+02   r2 = -0.8594941361563D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.9664470591248D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.9664470591247D+02   r2 = -0.9467945094414D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1025143594508D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1025143594508D+03   r2 = -0.1004256998277D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1066657769627D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1066657769627D+03   r2 = -0.1044882666071D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1110205759893D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1110205759893D+03   r2 = -0.1087484977447D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1203879764451D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1203879764451D+03   r2 = -0.1179078884375D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1254264110036D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1254264110036D+03   r2 = -0.1228319329751D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1280403902863D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1280403902862D+03   r2 = -0.1253858947838D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1334672181555D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1334672181555D+03   r2 = -0.1306866902081D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1391724098965D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1391724098965D+03   r2 = -0.1362573491576D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1451727668704D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1451727668704D+03   r2 = -0.1421140249428D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1687695451081D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1687695451081D+03   r2 = -0.1651251908804D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1843209405623D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1843209405623D+03   r2 = -0.1802738747913D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.2368453322256D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.2368453322256D+03   r2 = -0.2313509205947D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.2665784177750D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.2665784177749D+03   r2 = -0.2602114031020D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.3083933242244D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.3083933242244D+03   r2 = -0.3007415043515D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.3970548335644D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.3970548335644D+03   r2 = -0.3864826751963D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.5041960354429D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.5041960354429D+03   r2 = -0.4897898559030D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.5325295847185D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.5325295847185D+03   r2 = -0.5170601434500D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.6121613340763D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.6121613340763D+03   r2 = -0.5936033852488D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.6297604924475D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.6297604924475D+03   r2 = -0.6105010079579D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.7947807418113D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.7947807418113D+03   r2 = -0.7686391451862D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.8188769239386D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.8188769239385D+03   r2 = -0.7916873682083D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1014505309490D+04
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1014505309490D+04   r2 = -0.9784433055089D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1268981253752D+04
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1268981253752D+04   r2 = -0.1220507648358D+04
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1448827512277D+04
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1448827512277D+04   r2 = -0.1391059383697D+04
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1550172091156D+04
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1550172091156D+04   r2 = -0.1486992554306D+04
bperp-ode.pdf
#+end_example


#+BEGIN_SRC python :tangle bperp-shape.py :eval no
  import sys
  import numpy as np
  from scipy.integrate import odeint
  from matplotlib import pyplot as plt
  import seaborn as sns


  def rhs(y, t):
      """Right-hand side of ODE"""
      ydot = y[1]
      ydotdot = 0.5 * y[0] / (y[0]**2 + t**2)**1.5
      return ydot, ydotdot

  def trajectory(tgrid, y0, ydot0=0):
      """Find dust grain trajectory tied to B field - no drag"""
      soln = odeint(rhs, [y0, ydot0], tgrid)
      return soln[:, 0], soln[:, 1]


  figfile = sys.argv[0].replace(".py", ".png")

  y0max = 10.0
  ny0 = 4000
  y0min = y0max/ny0
  y0grid_lin = np.linspace(y0min, y0max, ny0)
  ny0_log = 50
  y0grid_log = np.logspace(np.log10(y0min) - 4.0, np.log10(y0min), ny0_log)
  y0grid = np.concatenate([y0grid_log, y0grid_lin])
  jsamples = [ny0_log + int(ny0*y/y0max) for y in [y0min, 0.2, 1.0, 2.0]]



  nt = 32001

  sns.set_color_codes()
  fig, ax = plt.subplots(figsize=(5, 4))
  ystack, vstack, xstack, wstack = [], [], [], []
  tgrid = np.linspace(-20, 10, nt)
  dt = tgrid[1] - tgrid[0]
  for y0 in y0grid:
      t = tgrid + np.random.random(len(tgrid))*0.8*dt
      y, v = trajectory(t, y0)
      ystack.append(y)
      vstack.append(v)
      xstack.append(-t)
      if y0 in y0grid_lin:
          # weight by 1/r
          wstack.append(y0/y)
      else:
          # do not include streamlines from log grid
          wstack.append(np.zeros_like(y))

  # Find inner envelope of trajectories: minimum y at each x
  ystack = np.array(ystack)
  vstack = np.array(vstack)
  xstack = np.array(xstack)
  wstack = np.array(wstack)
  yshape = np.min(ystack, axis=0)

  # Fit a second order polynomial to x(y)
  m = yshape > 0.5
  p2 = np.poly1d(np.polyfit(yshape[m], tgrid[m], 2))

  # Fit a first order polynomial to x(y**2)
  p1 = np.poly1d(np.polyfit(yshape[m]**2, tgrid[m], 1))

  # extended y grid to show negative side
  yext = np.linspace(-2.0, yshape.max(), 200)
  j0 = np.argmin(p2(yext))

  # find density by binning
  xmin, xmax = -8.0, 1.5
  ymin, ymax = -1.2, 7.0
  H, xe, ye = np.histogram2d(xstack.ravel(), ystack.ravel(),
                             bins=(4*95, 4*82), weights=wstack.ravel(),
                             range=[[xmin, xmax], [ymin, ymax]])
  Hm, xe, ye = np.histogram2d(xstack.ravel(), -ystack.ravel(),
                              bins=(4*95, 4*82), weights=wstack.ravel(),
                              range=[[xmin, xmax], [ymin, ymax]])

  H += Hm
  H0 = H[-1, -1]
  ax.imshow(H.T, origin='lower', extent=[xmin, xmax, ymin, ymax],
            vmin=0.0, vmax=3*H0, cmap='gray_r')


  ax.plot(-tgrid, yshape, lw=0.0)

  ax.plot(-p1(yext**2), yext, lw=0.5, ls="--")
  ax.plot(-p2(yext), yext, lw=0.5, ls="--")

  ax.axhline(0.0, color="k", alpha=0.5, lw=0.3)

  ax.plot(-p2(yext[j0]), yext[j0], "+", color="g", ms=4)
  ax.plot(-p1(0.0), 0.0, "+", color="orange", ms=4)
  ax.plot(0.0, 0.0, "*", color="r", ms=6)

  for j in jsamples:
      ax.plot(-tgrid, ystack[j, :], lw=0.3, color="k")

  #ax.legend(fontsize="small", ncol=2)

  ax.set_aspect("equal")
  ax.set(xlim=[xmin, xmax], ylim=[ymin, ymax],
         xlabel="$x / R_{**}$", ylabel="$y / R_{**}$")
  sns.despine()
  fig.tight_layout()
  fig.savefig(figfile, dpi=600)

  print(figfile, end="")
#+END_SRC


#+BEGIN_SRC sh :results file
  python bperp-shape.py
#+END_SRC

#+RESULTS:
[[file:bperp-shape.png]]
