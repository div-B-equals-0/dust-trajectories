* Dust trajectories in bow shocks
This is an extension of the models I have done in ~dust-wave.org~ from the Jorge bow shock project. 
+ 1d and 3d models for the trajectories of charged dust grains under 3 forces
  1. Radiation from a star
  2. Gas-grain drag
     - Stokes drag (solid body), important at supersonic relative speeds
     - Coulomb drag, peaks at roughly 10 km/s for ionized gas
  3. Lorentz force, couples grains to B-field
+ Main scenario considered is a stream of dusty plasma, incident on a star


* Drag force
+ Functional form from Draine & Salpeter
+ Calibrated from Cloudy models
  + Major contribution is from protons
  + But does include the minor contribution from electrons and helium ions
  + Electrons fill in the minimum around 100 km/s
  + Helium adds a shoulder to the peak around 5 km/s
+ Implemented in [[file:ds79.py]]
+ Note that it is normalized by the gas pressure and the grain cross-sectional area
** Test drag force
#+BEGIN_SRC python :results file :return pltfile
  import numpy as np
  import ds79
  from matplotlib import pyplot as plt
  import seaborn as sns

  pltfile = "test-Fdrag-exact.pdf"

  w = np.logspace(-1.5, 3.5, 200)

  fig, ax = plt.subplots()

  for phi in 0.25, 1.0, 4.0, 16.0:
      ax.plot(w, ds79.Fdrag(w, T=8000, phi=phi, n=100), label=rf"$\phi = {phi:.2f}$")
  ax.legend(title="Grain potential")
  ax.set(
      xscale="log",
      yscale="log",
      xlabel="Gas-grain velocity difference, $w$, km/s",
      ylabel=r"Drag force $/ (2 n k T) (\pi a^{2}) $",
  )
  sns.despine()
  fig.tight_layout()
  fig.savefig(pltfile)
#+END_SRC

#+RESULTS:
[[file:test-Fdrag-exact.pdf]]
** Components of drag force
+ Metal abundances for gas-phase ISM from Cloudy.  Here I list all elements with abundances higher than 1 part-per-million
  |    |         |         abun |  A |       abun*A |
  |----+---------+--------------+----+--------------|
  | C  | -3.5229 | 2.9998532e-4 | 12 | 3.5998238e-3 |
  | N  | -4.1549 | 7.0000316e-5 | 14 | 9.8000442e-4 |
  | O  | -3.3979 | 4.0003685e-4 | 16 | 6.4005896e-3 |
  | Ne | -4.2218 | 6.0006735e-5 | 20 | 1.2001347e-3 |
  | Mg | -5.5229 | 2.9998532e-6 | 24 | 7.1996477e-5 |
  | Si | -5.3979 | 4.0003685e-6 | 28 | 1.1201032e-4 |
  | S  | -5.0000 |         1e-5 | 32 |       3.2e-4 |
  | Ar | -5.5229 | 2.9998532e-6 | 40 | 1.1999413e-4 |
  | Fe | -5.5229 | 2.9998532e-6 | 56 | 1.6799178e-4 |
  |----+---------+--------------+----+--------------|
  |    |         |      0.00085 |    |         15.3 |
  #+TBLFM: $3=10**$-1::$5=$-1 $-2::@11$3=vsum(@I..@II);f5::@11$5=vsum(@I..@II)/$-2;f1
+ So, the total abundance is 8.5e-4 and the average mass is 15.3
  + We use these as an average metal collider in the graph
  + Assume metals are doubly ionized
  + Unsurprisingly, they make a negligible contribution

#+BEGIN_SRC python :results file :return pltfile
  import numpy as np
  import ds79
  from matplotlib import pyplot as plt
  import seaborn as sns

  pltfile = "test-Fdrag-components.pdf"

  w = np.logspace(-1.5, 3.5, 200)

  sns.set_color_codes()
  fig, ax = plt.subplots(figsize=(5, 4))

  colliders = ds79.DEFAULT_COLLIDERS + [ds79.Collider("CNO++", A=15.3, Z=2.0, abun=8.5e-4)]
  fdrag = ds79.Fdrag_components(w, T=8000, phi=10.0, n=100, colliders=colliders)

  colors = "rcmy"
  ftotal = np.zeros_like(w)
  for collider, color in zip(fdrag, colors):
      ax.plot(w, fdrag[collider][1], color=color, label=collider)
      ax.plot(w, fdrag[collider][0], color=color, ls='--', label="_nolabel_")
      ftotal += fdrag[collider][0] + fdrag[collider][1]
  ax.plot(w, ftotal, color="k", label="Total")
  ax.legend(title="Collider")
  ax.set(
      xscale="log",
      yscale="log",
      xlabel="Gas-grain velocity difference, $w$, km/s",
      ylabel=r"Drag force $/ (2 n k T) (\pi a^{2}) $",
  )
  sns.despine()
  fig.tight_layout()
  fig.savefig(pltfile)
#+END_SRC

#+RESULTS:
[[file:test-Fdrag-components.pdf]]
** Regimes in (v, \phi) space
#+BEGIN_SRC python :results file :return pltfile
  import numpy as np
  import ds79
  from matplotlib import pyplot as plt
  import seaborn as sns
  import matplotlib.patheffects as PathEffects

  pltfile = "test-Fdrag-param-space.pdf"

  w, phi = np.meshgrid(
      np.logspace(-1.5, 3.5, 200),
      np.logspace(-2.0, 2.0, 200)
  )

  sns.set_color_codes()
  fig, ax = plt.subplots(figsize=(5, 5))

  colliders = ds79.DEFAULT_COLLIDERS + [ds79.Collider("CNO++", A=15.3, Z=2.0, abun=8.5e-4)]
  fdict = ds79.Fdrag_components(w, T=8000, phi=phi, n=100, colliders=colliders)

  # Total solid body drag
  fEpstein = np.sum([f[0] for f in fdict.values()], axis=0)
  # Total solid body plus Coulomb
  fTotal = np.sum([f[0] + f[1] for f in fdict.values()], axis=0)

  frac_Epstein = fEpstein / fTotal
  frac_proton = fdict["proton"][1] / fTotal
  frac_electron = fdict["electron"][1] / fTotal


  ax.contourf(w, phi, frac_Epstein, [0.5, 0.6, 0.7, 1.0], alpha=1.0,
             cmap="Blues")
  ax.contourf(w, phi, frac_proton, [0.5, 0.6, 0.7, 1.0], alpha=1.0,
             cmap="Reds")
  ax.contourf(w, phi, frac_electron, [0.5, 0.6, 0.7, 1.0], alpha=1.0,
             cmap="Greens")
  cw = ax.contour(w, phi, fTotal,
                  [0.1, 1.0, 10.0, 100.0, 1.e3, 1.e4, 1.e5],
                  colors="w", alpha=0.7, linewidths=2.5)
  ck = ax.contour(w, phi, fTotal,
                  [0.1, 1.0, 10.0, 100.0, 1.e3, 1.e4, 1.e5],
                  colors="k", linewidths=0.5)

  # Place contour labels by hand
  for x, y, s in [
          [6, 0.015, r"1",  ],
          [100, 0.015, r"100",],
          [1000, 0.015, r"10\,000",],
  ]:
      ax.text(x, y, f"$f_{{\mathrm{{drag}}}} = {s} \,f_*$", color="k",
              ha="center", va="bottom", fontweight="black",
              rotation="vertical", 
              path_effects=[PathEffects.withStroke(linewidth=3,
                                                   alpha=0.7,
                                                   foreground="w")])


  ax.axvline(10.0, color="w", lw=3, ls=":")
  ax.axvline(420.0, color="w", lw=1.5, ls=":", ymin=0.75)
  for x, y, s in [
          [1.5, 0.04, "I",  ],
          [140.0, 0.3, "II",],
          [1.0, 10.0, "III",],
          [14.0, 20.0, "IV",],
          [120.0, 25.0, "V",],
  ]:
      ax.text(x, y, s, color="w", fontsize="xx-large", fontweight="black")

  ax.set(
      xscale="log",
      yscale="log",
      xlabel="Gas-grain velocity difference, $w$, km/s",
      ylabel=r"Grain potential, $|\phi|$",
  )
  sns.despine()
  fig.tight_layout()
  fig.savefig(pltfile)
#+END_SRC

#+RESULTS:
[[file:test-Fdrag-param-space.pdf]]


* On-axis 1d integration
+ As before, we normalize distances by the radiative turnaround radius
  + Velocities normalized by v_\infty
  + Times normalized by R_{**}/v_\infty
+ This means that the radiation force is just 1/2 in dimensionless units

#+BEGIN_SRC python :eval no :tangle test-stream-1d.py
  import sys
  import numpy as np
  from scipy.integrate import odeint
  from matplotlib import pyplot as plt
  import seaborn as sns
  import duststream as ds


  try: 
      STAR = sys.argv[1]
      VINF = float(sys.argv[2])
      LOGN = float(sys.argv[3])
      GRAIN = sys.argv[4]
      A = float(sys.argv[5])
  except:
      print(f"Usage: {sys.argv[0]} L4 VINF LOGN GRAIN A [ZOOM]")

  try: 
      ZOOM = float(sys.argv[6])
  except:
      ZOOM = 1.0


  L4 = {
      "MS10": 0.64,
      "MS20": 5.45,
      "MS40": 22.2,
      "BSG": 30.2,
  }
  eta = {
      "MS10": 0.0066,
      "MS20": 0.1199,
      "MS40": 0.4468,
      "BSG": 0.3079,
  }


  # Set minor parameters according to star and grain type
  Tgas = {
      "MS10": 8000.0,
      "MS20": 9000.0,
      "MS40": 1e4,
      "BSG": 8000.0,
  }

  if GRAIN == "gra":
      rho_d = 2.2
      if STAR in ["MS10", "BSG"]:
          phi_norm = 1.0
      else:
          phi_norm = 1.5
  else:
      rho_d = 3.5
      if STAR in ["MS10", "BSG"]:
          phi_norm = 0.7
      else:
          phi_norm = 1.4




  # Initial conditions
  Rstart = 2.5/ZOOM
  y0 = [Rstart, -1.0]

  stream = ds.DustStream(L4=L4[STAR], vinf=VINF, n=10**LOGN, a=A,
                         eta=eta[STAR], T=Tgas[STAR], phi_norm=phi_norm, rho_d=rho_d)

  streamid = f"{STAR}-v{int(VINF):03d}-n{int(10*LOGN):+02d}-{GRAIN}{int(100*A):03d}"

  figfile = sys.argv[0].replace('.py', f'-{streamid}.pdf')

  # Time grid
  t = np.linspace(0.0, 10.0/ZOOM, 5001)
  soln = odeint(ds.dydt_1d, y0, t, args=(stream,))
  t0 = t[soln[:, 1] >= 0.0].min()

  # Slippage velocity
  w = 1.0 + soln[:, 1]
  # Drift velocity
  # wdrift = 1.0 / alpha / soln[:, 0]

  sns.set_style('ticks')
  sns.set_color_codes('deep')
  fig, (ax, axp) = plt.subplots(2, 1, figsize=(4, 6))
  ax.plot(t - t0, soln[:, 0], label='$R/R_{0}$', zorder=3, lw=0.5)
  ax.plot(t - t0, soln[:, 1], label='$v / v_{\infty}$', lw=0.5)
  #ax.plot(t - t0, wdrift, ls='--', label='$w_\mathrm{drift} / v_{\infty}$')

  # ax.axhline(1.0/alpha, ls=':', color='k', lw=0.8)
  ax.axhspan(0.0, 1.0, color='k', alpha=0.1)
  ax.legend(loc="lower left")
  ax.set(
      xlabel=r'Time / $(R_{0} / v_{\infty})$',
      ylim=[-1.1, 2.1]
  )
  t2 = np.linspace(0.0, 20.0, 201)

  R1, R2 = 2e-4, 20.0

  x1, x2 = R1/stream.Rstarstar, R2/stream.Rstarstar
  w1, w2 = 0.03/stream.vinf, 2000.0/stream.vinf

  xpts = np.logspace(np.log10(x1), np.log10(x2), 151)
  wpts = np.logspace(np.log10(w1), np.log10(w2), 101)

  agrid = ds.total_accel(xpts[None, :], stream.vinf*wpts[:, None], stream)


  # Add dimensions back in for plotting
  xpts *= stream.Rstarstar
  x1 *= stream.Rstarstar
  x2 *= stream.Rstarstar

  wpts *= stream.vinf
  w1 *= stream.vinf
  w2 *= stream.vinf

  axp.contour(xpts, wpts, agrid, [0.0], linewidths=3, linestyles=":", colors="m")
  for z, cmap, dex in [[np.log10(agrid), "Blues", 10.0],
                       [np.log10(-agrid), "Reds", 4.0]]: 
      axp.contourf(xpts, wpts, z,
                   10, #[-0.5, 0.0, 0.5, 1.0, 1.5, 2.0],
                   vmax=np.nanmax(z), vmin=np.nanmax(z)-dex,
                   cmap=cmap)

  axp.plot(soln[:, 0]*stream.Rstarstar, w*stream.vinf, lw=4, color="w", alpha=0.5)
  axp.plot(soln[:, 0]*stream.Rstarstar, w*stream.vinf, lw=2, color="k", alpha=1.0)
  axp.axhline(stream.vinf, color='k', lw=0.5)
  axp.axvline(stream.Rstarstar, color='k', lw=0.5)
  axp.axvline(stream.R0, color='r', lw=2, ls="--")
  axp.set(xlabel='$R$, pc', ylabel='$w$, km/s',
          xlim=[x1, x2], ylim=[w1, w2],
          xscale="log", yscale="log",
          xticks=0.5*np.arange(7),
          yticks=[-1.0, -0.5, 0., 0.5, 1.0, 1.5])

  sns.despine()
  fig.tight_layout()
  fig.text(0.02, 0.97, '(a)')
  fig.text(0.02, 0.5, '(b)')
  fig.savefig(figfile)
  print(figfile, end='')

#+END_SRC

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 20 -2 gra 0.02
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v020-n-20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 10 -2 gra 0.02
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v010-n-20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 10 -2 gra 0.2
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v010-n-20-gra020.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 10 -2 sil 0.2
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v010-n-20-sil020.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 5 -2 gra 0.2
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v005-n-20-gra020.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 5 -2 sil 0.2
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v005-n-20-sil020.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 5 -2 sil 0.5
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v005-n-20-sil050.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 50 4 sil 0.5
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v050-n+40-sil050.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 100 4 sil 0.5
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v100-n+40-sil050.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 100 4 sil 0.2
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v100-n+40-sil020.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 100 4 sil 0.02
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v100-n+40-sil002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS20 20 -2 gra 0.02
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS20-v020-n-20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS40 20 -2 gra 0.02
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS40-v020-n-20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py BSG 20 -2 gra 0.02
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-BSG-v020-n-20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 20 -1.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v020-n-10-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 20 0.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v020-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 40 0.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v040-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 60 0.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v060-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 80 0.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v080-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 100 0.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v100-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 150 0.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v150-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 60 1.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v060-n+10-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 80 1.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v080-n+10-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 100 1.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v100-n+10-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 150 1.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v150-n+10-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 200 1.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v200-n+10-gra002.pdf]]


#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 150 2.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v150-n+20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 150 3.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v150-n+30-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 150 4.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v150-n+40-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 60 2.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v060-n+20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 40 2.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v040-n+20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 60 3.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v060-n+30-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 60 3.0 gra 0.2 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v060-n+30-gra020.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 60 3.0 sil 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v060-n+30-sil002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 60 3.0 sil 0.2 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v060-n+30-sil020.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 60 4.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v060-n+40-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 60 4.0 gra 0.5 
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v060-n+40-gra050.pdf]]


#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 150 3.0 gra 0.2 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v150-n+30-gra020.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS10 150 3.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS10-v150-n+30-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS20 150 1.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS20-v150-n+10-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS40 150 1.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS40-v150-n+10-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS40 150 1.0 gra 0.2 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS40-v150-n+10-gra020.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS40 150 1.0 gra 0.5 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS40-v150-n+10-gra050.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS40 50 1.0 gra 0.5 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS40-v050-n+10-gra050.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS40 20 1.0 gra 0.5 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS40-v020-n+10-gra050.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS40 300 1.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS40-v300-n+10-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS40 300 0.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS40-v300-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS40 500 0.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS40-v500-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS20 300 0.0 gra 0.02 1.0
#+END_SRC

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS20 300 0.0 gra 0.01 
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS20-v300-n+0-gra001.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS20 500 0.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS20-v500-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS20 500 1.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS20-v500-n+10-gra002.pdf]]

#+BEGIN_SRC sh :results file
python test-stream-1d.py MS20 500 2.0 gra 0.02 1.0
#+END_SRC

#+RESULTS:
[[file:test-stream-1d-MS20-v500-n+20-gra002.pdf]]

** Initial impressions
+ There are at least 4 parameters:
  + L4, v, n, a
  + [X] In principle \phi should be determined self-consistently
    + Now done
  + Everything else is minor: \rho_d, Q_p
+ For v_\infty in range 11 \to 80 km/s, we get the limit cycle behavior:
  + Dust is swept in past R_{** }and follows drift velocity
  + Gets turned around and shoots out
    + For v ~ 20 km/s we can go out at twice velocity that we came in, so that w = 60 km/s since that is right in the middle of the trough in the drag force
    + src_python{ds.DustStream(vinf=20, phi=15.0, a=0.04, L4=0.63, n=1.0e-1)}
  + Decelerated by electron drag while w is of order 2 v_\infty
  + Sudden deceleration and total re-coupling by proton drag when w falls to about 20 km/s 


** Functional dependence of the trajectory parameters
+ The net force map
  + The zero-contour at least does not depend on a or v
+ Grain size effects
  + Increasing size, a, reduces R_{\star\star} because \kappa_d = Q_P \sigma/m = 3 Q_p/(4 a \rho_d) is reduced and R_{\star\star} \prop \kappa_d L / v^2
  + But it does not effect equilibrium R because that is just the radius where w_drift = v
  + Does slightly effect minimum R because there is an overshoot below sonic drift radius R_sd (where w_drift = 10 km/s), which does depend on \sigma/m
+ Velocity effects
  + We can move from the damped v > 80 to oscillatory 11 < v < 80 to damped again v < 10  regimes, but this does not change the dust wave radius in physical units much
  + As velocity goes up, bowshock/wave radius R_0 gets smaller, so that dust wave separates
    + For instance ~MS10 (20,40,60,80) 0.0 gra 0.02~
    + At 20 km/s, R_0 is bigger than R_DW so there is no dust wave
    + At 40 km/s and greater, R_0 is smaller so the dust wave can form
    + As v increases, oscillations get floppier
      + Albeit, only in terms of R_{\star\star} - they are more or less the same in terms of R_SD
    + Finally, at 80 km/s we pass over to the damped oscillations
+ Density effects
  + As we increase the density, we reduce R_0 and R_SD
    + So minimum velocity for DW is little changed
    + [X] But how exactly does R_SD change with density?
      + It is at a fixed radiation parameter, \Xi = P_rad / P_gas
  + But R_{\star\star} is unchanged
    + so the oscillations get tighter since R_SD / R_{\star\star} is smaller
  + [X] /Speculation:/ at high enough density, we get into BW regime, where R_0 is also independent of density - in which case DW will merge in to BW (like when \alpha_drag > 100 in previous model)
    + This does seem to be true, but needs to be quantified more carefully
** Grain potential versus U_P (aka \Upsilon_P, aka \Xi)
+ This is roughly logarithmic
+ Graph in ~cloudy-dust-charging~ project
  + [[file:~/Dropbox/cloudy-dust-charging/phi-pratio.pdf]]
+ Reasonable approximation
  * \(\phi = 1.5 \log(U_{P}_{}/0.1) = 1.5 \bigl( \log(U_{P}_{}) + 2.3 \bigr)\)
    |   U_P |    \phi |
    |------+------|
    | 0.01 | -3.5 |
    |  0.1 | -0.0 |
    |    1 |  3.5 |
    |   10 |  6.9 |
    |  100 | 10.4 |
    | 1000 | 13.8 |
    |  1e4 | 17.3 |
    #+TBLFM: $2=1.5 log($1) + 3.45 ; %.1f
+ The above function is good for MS10 and BSG with carbon grains
  + Stellar type: hard spectrum (MS20, MS40) is about 1.5 times higher
  + Grain type: Si grains are about 1.5 times lower
+ Upsilon \Upsilon 𝚼 𝛶
+ Xi Ξ 𝛯 𝝣
+ R_\dag is the rip point, when P_rad/P_gas = \Xi_\dag
+ What would be a good replacement for \star\star?
  + R_\S or R_\subset or R_\supset or R_\wedge or R_\Leftrightarrow or R_\sim or R_\cap or \(R_\leadsto\) or \(R_{\Updownarrow}\) or \(R_{\hookrightarrow}\)
  + Not convinced by any of them
** Library for on-axis trajectories: ~onaxis_traject.py~
#+BEGIN_SRC sh
mkdir data
mkdir figs
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS20 500 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS20-v500-n+20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 50 4.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v050-n+40-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 50 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v050-n+30-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 50 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v050-n+20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 300 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v300-n+20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 300 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v300-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 150 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v150-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 100 1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v100-n+10-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 100 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v100-n+20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 100 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v100-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 80 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v080-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 60 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v060-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 40 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v040-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 20 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v020-n+0-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 20 -1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v020-n-10-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 20 -3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v020-n-30-gra002.pdf]]

Very small grain
#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 80 4.0 gra 0.002
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v080-n+40-gra000.pdf]]

** Do plots of radii versus density

#+BEGIN_SRC sh :results file
python onaxis-stats-plot.py MS20 v300 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-stats-plot-MS20-v300-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-stats-plot.py MS20 v100 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-stats-plot-MS20-v100-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-stats-plot.py MS40 v500 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-stats-plot-MS40-v500-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-stats-plot.py MS10 v040 gra020
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-stats-plot-MS10-v040-gra020.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-stats-plot.py MS10 v040 sil002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-stats-plot-MS10-v040-sil002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-stats-plot.py MS10 v040 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-stats-plot-MS10-v040-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-stats-plot.py MS10 v080 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-stats-plot-MS10-v080-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-stats-plot.py MS10 v020 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-stats-plot-MS10-v020-gra002.pdf]]

** Normalize all radii by R_*
#+BEGIN_SRC sh :results file
python onaxis-norm-plot.py MS10 v080 sil002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-norm-plot-MS10-v080-sil002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-norm-plot.py MS10 v080 gra020
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-norm-plot-MS10-v080-gra020.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-norm-plot.py MS10 v080 sil000
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-norm-plot-MS10-v080-sil000.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-norm-plot.py MS10 v080 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-norm-plot-MS10-v080-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-norm-plot.py MS10 v040 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-norm-plot-MS10-v040-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-norm-plot.py MS10 v100 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-norm-plot-MS10-v100-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-norm-plot.py MS10 v300 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-norm-plot-MS10-v300-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-norm-plot.py MS20 v300 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-norm-plot-MS20-v300-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-norm-plot.py MS40 v500 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-norm-plot-MS40-v500-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-norm-plot.py MS40 v300 gra002
#+END_SRC

#+RESULTS:
[[file:figs/onaxis-norm-plot-MS40-v300-gra002.pdf]]



** Plot impulse of f_drag during trajectory
#+BEGIN_SRC sh :results file
python onaxis-impulse.py MS10 50 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-impulse-MS10-v050-n+30-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-impulse.py MS10 80 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-impulse-MS10-v080-n+30-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-impulse.py MS10 80 4.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-impulse-MS10-v080-n+40-gra002.pdf]]

#+BEGIN_SRC sh :results file
python onaxis-impulse.py MS10 40 4.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-impulse-MS10-v040-n+40-gra002.pdf]]

* TODO Make some videos of the phase space trajectories

* DONE 3d trajectories
CLOSED: [2018-05-09 Wed 18:13]
+ Actually 2D in non-magnetic case, since each trajectory is a plane curve


V = 80 and n = 10

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 80 1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v080-n+10-gra002-Y0001.pdf]]

V = 60 and n = 10, at a load of different Y0

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 60 1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+10-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.1 MS10 60 1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+10-gra002-Y0100.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.3 MS10 60 1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+10-gra002-Y0300.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.4 MS10 60 1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+10-gra002-Y0400.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.5 MS10 60 1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+10-gra002-Y0500.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.6 MS10 60 1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+10-gra002-Y0600.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 1.0 MS10 60 1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+10-gra002-Y1000.pdf]]

V = 60 and n = 1

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 60 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+00-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.01 MS10 60 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+00-gra002-Y0010.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.1 MS10 60 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+00-gra002-Y0100.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.3 MS10 60 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+00-gra002-Y0300.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.4 MS10 60 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+00-gra002-Y0400.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.5 MS10 60 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+00-gra002-Y0500.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.6 MS10 60 0.0 gra 0.02
#+END_SRC

V = 40 and n = 1  

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 40 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v040-n+00-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.1 MS10 40 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v040-n+00-gra002-Y0100.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.1 MS10 40 0.0 sil 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v040-n+00-sil002-Y0100.pdf]]

V = 100 and n = 1

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 100 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+00-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.1 MS10 100 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+00-gra002-Y0100.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.3 MS10 100 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+00-gra002-Y0300.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.45 MS10 100 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+00-gra002-Y0450.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.5 MS10 100 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+00-gra002-Y0500.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.52 MS10 100 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+00-gra002-Y0520.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.6 MS10 100 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+00-gra002-Y0600.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.7 MS10 100 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+00-gra002-Y0700.pdf]]

Higher density

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 100 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+20-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.1 MS10 100 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+20-gra002-Y0100.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.3 MS10 100 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+20-gra002-Y0300.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.4 MS10 100 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+20-gra002-Y0400.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.5 MS10 100 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+20-gra002-Y0500.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.6 MS10 100 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+20-gra002-Y0600.pdf]]


Even higher density

#+BEGIN_SRC sh :results file
python onaxis_traject.py MS10 100 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/on-axis-MS10-v100-n+30-gra002.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.0 MS10 100 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+30-gra002-Y0000.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 100 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+30-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.1 MS10 100 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+30-gra002-Y0100.pdf]]


Lower velocity, higher density

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 60 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n+30-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 40 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v040-n+30-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 40 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v040-n+20-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.1 MS10 40 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v040-n+20-gra002-Y0100.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.3 MS10 40 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v040-n+20-gra002-Y0300.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.5 MS10 40 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v040-n+20-gra002-Y0500.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 40 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v040-n+00-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.1 MS10 40 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v040-n+00-gra002-Y0100.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.3 MS10 40 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v040-n+00-gra002-Y0300.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.5 MS10 40 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v040-n+00-gra002-Y0500.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 50 1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v050-n+10-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 50 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v050-n+00-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 50 -1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v050-n-10-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 55 -1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v055-n-10-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 60 -1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v060-n-10-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 65 -1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v065-n-10-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 70 -1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v070-n-10-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 70 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v070-n+00-gra002-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.1 MS10 70 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v070-n+00-gra002-Y0100.pdf]]

Bigger grain

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 70 0.0 gra 0.2
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v070-n+00-gra020-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 100 0.0 gra 0.2
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v100-n+00-gra020-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 200 2.0 gra 0.2
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v200-n+20-gra020-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.001 MS10 200 4.0 gra 0.2
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v200-n+40-gra020-Y0001.pdf]]

#+BEGIN_SRC sh :results file
python twod_traject.py 0.1 MS10 150 4.0 sil 0.2
#+END_SRC

#+RESULTS:
[[file:figs/twod-MS10-v150-n+40-sil020-Y0100.pdf]]



** Maps of the 2d trajectories


#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 70 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v070-n+00-gra002.pdf]]

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 70 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v070-n+30-gra002.pdf]]

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 60 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v060-n+30-gra002.pdf]]

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 150 3.0 gra 0.02
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 300 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v300-n+30-gra002.pdf]]


#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 150 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v150-n+20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 100 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v100-n+20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 80 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v080-n+20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 60 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v060-n+20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 40 2.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v040-n+20-gra002.pdf]]

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 40 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v040-n+00-gra002.pdf]]

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 100 3.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v100-n+30-gra002.pdf]]

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 100 0.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v100-n+00-gra002.pdf]]

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 100 -1.0 gra 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v100-n-10-gra002.pdf]]

Looking at the sequence of 1e3 pcc models, the inner radius stays the same, but the outer radius reduces as velocity increases. 

Smaller dust grains - sticks more closely to R_\dag and R_drift

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 60 2.0 gra 0.002
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v060-n+20-gra000.pdf]]

Larger dust grains - penetrate in deeper and bounce out further 

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 60 2.0 gra 0.2
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v060-n+20-gra020.pdf]]

Silicate grains instead of graphite - has about 1.7 times the radius.  Otherwise, similar.  Also, take an unconscionably long time to run. 

#+BEGIN_SRC sh :results file
python twod-stream-map.py MS10 60 2.0 sil 0.02
#+END_SRC

#+RESULTS:
[[file:twod-stream-map-MS10-v060-n+20-sil002.pdf]]


* TODO Adding the Lorentz force
+ First do the guiding center approximation for Larmor radius \to 0
+ Implemented in [[file:frozen_trajectory.py]]
+ Testing if it is working

#+BEGIN_SRC sh :results file
 python frozen_trajectory.py MS10 60 2.0 gra 0.02 0.0 0.53 0.0
#+END_SRC

#+RESULTS:
[[file:figs/frozen-Y0530-Z0000-MS10-v060-n+20-gra002-th000.pdf]]

+ Now do maps like before
  + Implemented in [[file:frozen-stream-map.py]]
  + Takes a long time to run
+ And movies
  + Implemented in [[file:frozen-stream-movie.py]]

** Looking at the 90 degree case
+ drag-confined example
  + [[file:frozen-stream-map-MS10-v060-n+20-gra002-th090-Z0000.pdf]]
+ inertia-confined example
  + [[file:frozen-stream-map-MS10-v400-n+00-gra002-th090-Z0000.pdf]]
** Inertia-confined magnetic dust wave
+ This has an analytic solution for \theta_B = 0
+ But for \theta_B = 90, the ODE is much gnarlier
*** Parallel case: \theta_B = 0

#+BEGIN_SRC python :eval no :tangle bpara-density.py
  import sys
  import numpy as np
  from matplotlib import pyplot as plt
  import seaborn as sns

  dx = dy = 0.01
  xmin, xmax = -3.0, 3.0
  ymin, ymax = -1.5, 3.5
  # xmin, xmax = -2.0, 2.0
  # ymin, ymax = -0.2, 1.5
  x, y = np.meshgrid(
      np.arange(xmin, xmax, dx),
      np.arange(ymin, ymax, dx)
  )
  R = np.hypot(x, y)
  rho = 1/np.sqrt(1 - 1/R)
  rho[y**2 < 1] = 2.0*rho[y**2 < 1]
  rho[(y**2 < 1) & (x < 0)] = 0.0
  rho[R <= 1] = 0.0

  figfile = sys.argv[0].replace(".py", ".png")
  sns.set_color_codes()
  fig, ax = plt.subplots(figsize=(5, 4))

  ax.imshow(rho, origin='lower', extent=[xmin, xmax, ymin, ymax],
            vmin=0.0, vmax=10.0, cmap='gray_r')

  ax.axhline(0.0, color="k", alpha=0.5, lw=0.3)
  ax.axvline(0.0, color="k", alpha=0.5, lw=0.3)
  ax.plot(0.0, 0.0, "*", color="r", ms=6)

  ax.set_aspect("equal")
  ax.set(xlim=[xmin, xmax], ylim=[ymin, ymax],
         xlabel="$x / R_{**}$", ylabel="$y / R_{**}$")
  sns.despine()
  fig.tight_layout()
  fig.savefig(figfile, dpi=600)
  print(figfile, end="")

#+END_SRC

#+BEGIN_SRC sh :results file
  python bpara-density.py
#+END_SRC

#+RESULTS:
[[file:bpara-density.png]]


*** Perpendicular case: \theta_B = 90
#+BEGIN_SRC python :tangle bperp-ode.py :eval no
  import sys
  import numpy as np
  from scipy.integrate import odeint
  from matplotlib import pyplot as plt
  import seaborn as sns


  def rhs(y, t):
      """Right-hand side of ODE"""
      ydot = y[1]
      ydotdot = 0.5 * y[0] / (y[0]**2 + t**2)**1.5
      return ydot, ydotdot

  def trajectory(tgrid, y0, ydot0=0):
      """Find dust grain trajectory tied to B field - no drag"""
      soln = odeint(rhs, [y0, ydot0], tgrid)
      return soln[:, 0], soln[:, 1]

  def tfit(y0):
      return 2000*np.log10(10000/y0)**-5
  def afit(y0):
      return 1e-5*np.log10(3000/y0)**8.5

  figfile = sys.argv[0].replace(".py", ".pdf")

  y0min = 1e-3
  y0max = 50.0
  ny0 = 301
  y0grid = np.logspace(np.log10(y0min), np.log10(y0max), ny0)

  nt = 200001

  fig, ax = plt.subplots(figsize=(5, 4))
  vmax, tmax, twidth, yamax, amax = [], [], [], [], []
  for y0 in y0grid:
      tscale = 50*tfit(y0)
      tgrid = np.linspace(-200, 200, nt)
      tgrid = np.linspace(-tscale, tscale, nt)
      y, v = trajectory(tgrid, y0)
      a = np.gradient(v, tgrid)
      i0 = a.argmax()
      tmax.append(-tgrid[i0])
      vmax.append(v[-1])
      yamax.append(y[i0] - y0)
      amax.append(a.max())
      t1 = tgrid[np.argmin(np.abs(a[:i0] - 0.5*a.max()))]
      t2 = tgrid[i0:][np.argmin(np.abs(a[i0:] - 0.5*a.max()))]
      twidth.append(t2 - t1)


  x = y0grid
  ax.plot(x, amax, label=r"$a_{\mathrm{max}}$")
  ax.plot(x, vmax, label=r"$v_{\mathrm{final}}$")
  ax.plot(x, yamax, label=r"$y(a_{\mathrm{max}}) - y_{0}$")
  ax.plot(x, tmax, label=r"$-t(a_{\mathrm{max}})$")
  ax.plot(x, twidth, label=r"$\Delta t$")
  ax.plot(x, np.array(amax)*np.array(twidth),
          label=r"$a_{\mathrm{max}} \times \Delta t$")
  # ax.plot(x, tfit(y0grid), lw=0.2, label="_nolabel_")
  # ax.plot(x, afit(y0grid), lw=0.2, label="_nolabel_")
  ax.axhline(1.0, alpha=0.4, color="k", lw=0.3)
  ax.axvline(1.0, alpha=0.4, color="k", lw=0.3)
  #ax.legend(fontsize="small", ncol=2)
  ax.set(xscale="log", yscale="log", xlabel="impact parameter, $y_{0}$")

  sns.despine()
  fig.tight_layout()
  fig.savefig(figfile)

  print(figfile, end="")
#+END_SRC


#+BEGIN_SRC sh :results verbatim
  python bperp-ode.py
#+END_SRC

#+RESULTS:
#+begin_example
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.6084721674368D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.6084721674368D+01   r2 = -0.5706669253773D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.6223349663386D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.6223349663386D+01   r2 = -0.5842960622373D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.6365785002098D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.6365785002098D+01   r2 = -0.5982993100762D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.6586846113154D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.6586846113154D+01   r2 = -0.6200322154773D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.6662572477681D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.6662572477681D+01   r2 = -0.6274769584164D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.6817183501484D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.6817183501484D+01   r2 = -0.6426769049296D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.7139523924276D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.7139523924276D+01   r2 = -0.6743665181152D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.7480328064833D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.7480328064833D+01   r2 = -0.7078717263879D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.7568557971589D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.7568557971589D+01   r2 = -0.7165459162880D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.7748793798991D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.7748793798991D+01   r2 = -0.7342657110923D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.8028905065072D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.8028905065072D+01   r2 = -0.7618052691476D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.9054603460680D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.9054603460680D+01   r2 = -0.8626556675583D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.9626190796104D+01
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.9626190796104D+01   r2 = -0.9188620137524D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1024162831154D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1024162831154D+02   r2 = -0.9793853195680D+01
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1050095832636D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1050095832636D+02   r2 = -0.1004889904922D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1076820822866D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1076820822866D+02   r2 = -0.1031174369178D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1132761386325D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1132761386325D+02   r2 = -0.1086195990376D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1192225751219D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1192225751219D+02   r2 = -0.1144688111442D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1470905432332D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1470905432332D+02   r2 = -0.1418868026101D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1573610407175D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1573610407175D+02   r2 = -0.1519934760117D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1617088925200D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1617088925200D+02   r2 = -0.1562722459704D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1756451162596D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1756451162596D+02   r2 = -0.1699879790716D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1831522445357D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1831522445357D+02   r2 = -0.1773768468391D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1965387064744D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1965387064744D+02   r2 = -0.1905531440363D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1993551562844D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1993551562844D+02   r2 = -0.1933254739725D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.2111165862674D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.2111165862674D+02   r2 = -0.2049029502022D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.2173089673548D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.2173089673548D+02   r2 = -0.2109986324762D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.2303605662054D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.2303605662054D+02   r2 = -0.2238466532584D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.2443642111795D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.2443642111795D+02   r2 = -0.2376320538465D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.2755638712083D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.2755638712083D+02   r2 = -0.2683451826854D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.2884824849609D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.2884824849608D+02   r2 = -0.2810618798514D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.2974995048976D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.2974995048976D+02   r2 = -0.2899377075046D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.3770937603464D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.3770937603464D+02   r2 = -0.3682712665512D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.4024863639402D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.4024863639402D+02   r2 = -0.3932544862313D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.4228849910689D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.4228849910689D+02   r2 = -0.4133211992228D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.4299587026681D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.4299587026681D+02   r2 = -0.4202791431674D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.5362005517990D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.5362005517990D+02   r2 = -0.5247368200535D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.5750530788160D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.5750530788160D+02   r2 = -0.5629141443055D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.6398690390272D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.6398690390271D+02   r2 = -0.6265752439701D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.6515066753959D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.6515066753959D+02   r2 = -0.6380017189827D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.6633992297133D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.6633992297133D+02   r2 = -0.6496772852247D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.7006727522356D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.7006727522356D+02   r2 = -0.6862628622964D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.7136523178412D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.7136523178412D+02   r2 = -0.6990000743503D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.7830489017509D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.7830489017509D+02   r2 = -0.7670765787134D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.8607028873860D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.8607028873860D+02   r2 = -0.8432055857209D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.8773242858882D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.8773242858882D+02   r2 = -0.8594941361563D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.9664470591248D+02
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.9664470591247D+02   r2 = -0.9467945094414D+02
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1025143594508D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1025143594508D+03   r2 = -0.1004256998277D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1066657769627D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1066657769627D+03   r2 = -0.1044882666071D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1110205759893D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1110205759893D+03   r2 = -0.1087484977447D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1203879764451D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1203879764451D+03   r2 = -0.1179078884375D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1254264110036D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1254264110036D+03   r2 = -0.1228319329751D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1280403902863D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1280403902862D+03   r2 = -0.1253858947838D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1334672181555D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1334672181555D+03   r2 = -0.1306866902081D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1391724098965D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1391724098965D+03   r2 = -0.1362573491576D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1451727668704D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1451727668704D+03   r2 = -0.1421140249428D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1687695451081D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1687695451081D+03   r2 = -0.1651251908804D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1843209405623D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1843209405623D+03   r2 = -0.1802738747913D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.2368453322256D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.2368453322256D+03   r2 = -0.2313509205947D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.2665784177750D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.2665784177749D+03   r2 = -0.2602114031020D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.3083933242244D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.3083933242244D+03   r2 = -0.3007415043515D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.3970548335644D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.3970548335644D+03   r2 = -0.3864826751963D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.5041960354429D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.5041960354429D+03   r2 = -0.4897898559030D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.5325295847185D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.5325295847185D+03   r2 = -0.5170601434500D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.6121613340763D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.6121613340763D+03   r2 = -0.5936033852488D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.6297604924475D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.6297604924475D+03   r2 = -0.6105010079579D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.7947807418113D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.7947807418113D+03   r2 = -0.7686391451862D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.8188769239386D+03
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.8188769239385D+03   r2 = -0.7916873682083D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1014505309490D+04
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1014505309490D+04   r2 = -0.9784433055089D+03
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1268981253752D+04
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1268981253752D+04   r2 = -0.1220507648358D+04
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1448827512277D+04
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1448827512277D+04   r2 = -0.1391059383697D+04
 intdy--  t (=r1) illegal        
      in above message,  r1 = -0.1550172091156D+04
      t not in interval tcur - hu (= r1) to tcur (=r2)       
      in above,  r1 = -0.1550172091156D+04   r2 = -0.1486992554306D+04
bperp-ode.pdf
#+end_example


#+BEGIN_SRC python :tangle bperp-shape.py :eval no
  import sys
  import numpy as np
  from scipy.integrate import odeint
  from matplotlib import pyplot as plt
  import matplotlib.patheffects as PathEffects
  import seaborn as sns


  def rhs(y, t):
      """Right-hand side of ODE"""
      ydot = y[1]
      ydotdot = 0.5 * y[0] / (y[0]**2 + t**2)**1.5
      return ydot, ydotdot

  def trajectory(tgrid, y0, ydot0=0):
      """Find dust grain trajectory tied to B field - no drag"""
      soln = odeint(rhs, [y0, ydot0], tgrid)
      return soln[:, 0], soln[:, 1]


  figfile = sys.argv[0].replace(".py", ".png")

  # White border for lines
  pe = [PathEffects.withStroke(linewidth=2, foreground="w")]

  y0max = 10.0
  ny0 = 4000
  y0min = y0max/ny0
  y0grid_lin = np.linspace(y0min, y0max, ny0)
  ny0_log = 50
  y0grid_log = np.logspace(np.log10(y0min) - 4.0, np.log10(y0min), ny0_log)
  y0grid = np.concatenate([y0grid_log, y0grid_lin])
  jsamples = [ny0_log + int(ny0*y/y0max) for y in [y0min, 0.2, 1.0, 2.0]]



  nt = 32001

  sns.set_color_codes()
  fig, ax = plt.subplots(figsize=(5, 4))
  ystack, vstack, xstack, wstack = [], [], [], []
  tgrid = np.linspace(-20, 10, nt)
  dt = tgrid[1] - tgrid[0]
  for y0 in y0grid:
      t = tgrid + np.random.random(len(tgrid))*0.8*dt
      y, v = trajectory(t, y0)
      ystack.append(y)
      vstack.append(v)
      xstack.append(-t)
      if y0 in y0grid_lin:
          # weight by 1/r
          wstack.append(y0/y)
      else:
          # do not include streamlines from log grid
          wstack.append(np.zeros_like(y))

  # Find inner envelope of trajectories: minimum y at each x
  ystack = np.array(ystack)
  vstack = np.array(vstack)
  xstack = np.array(xstack)
  wstack = np.array(wstack)
  yshape = np.min(ystack, axis=0)

  # Fit a second order polynomial to x(y)
  m = yshape > 0.5
  p2 = np.poly1d(np.polyfit(yshape[m], tgrid[m], 2))

  # Fit a first order polynomial to x(y**2)
  p1 = np.poly1d(np.polyfit(yshape[m]**2, tgrid[m], 1))

  # extended y grid to show negative side
  yext = np.linspace(-2.0, yshape.max(), 200)
  j0 = np.argmin(p2(yext))

  # find density by binning
  xmin, xmax = -8.0, 1.5
  ymin, ymax = -1.2, 7.0
  H, xe, ye = np.histogram2d(xstack.ravel(), ystack.ravel(),
                             bins=(4*95, 4*82), weights=wstack.ravel(),
                             range=[[xmin, xmax], [ymin, ymax]])
  Hm, xe, ye = np.histogram2d(xstack.ravel(), -ystack.ravel(),
                              bins=(4*95, 4*82), weights=wstack.ravel(),
                              range=[[xmin, xmax], [ymin, ymax]])

  H += Hm
  H0 = H[-1, -1]
  ax.imshow(H.T, origin='lower', extent=[xmin, xmax, ymin, ymax],
            vmin=0.0, vmax=3*H0, cmap='gray_r')


  #ax.plot(-tgrid, yshape, lw=0.0)

  ax.plot(-p1(yext**2), yext, lw=1.5, ls="--")
  ax.plot(-p2(yext), yext, lw=1.5, ls="--")

  ax.axhline(0.0, color="k", alpha=0.5, lw=0.3)

  ax.plot(-p2(yext[j0]), yext[j0], "+", color="orange", ms=6)
  ax.plot(-p1(0.0), 0.0, "+", color="b", ms=6)
  ax.plot(0.0, 0.0, "*", color="r", ms=6, zorder=100,  path_effects=pe)

  for j in jsamples:
      ax.plot(-tgrid, ystack[j, :], lw=1, color="k", path_effects=pe)

  #ax.legend(fontsize="small", ncol=2)

  ax.set_aspect("equal")
  ax.set(xlim=[xmin, xmax], ylim=[ymin, ymax],
         xlabel="$x / R_{**}$", ylabel="$y / R_{**}$")
  sns.despine()
  fig.tight_layout()
  fig.savefig(figfile, dpi=600)

  print(figfile, end="")
#+END_SRC


#+BEGIN_SRC sh :results file
  python bperp-shape.py
#+END_SRC

#+RESULTS:
[[file:bperp-shape.png]]


** Magnetic stream map figures for paper

#+BEGIN_SRC sh :eval no
  time python frozen-stream-map.py MS10 40 1.0 gra 0.02 10 0.0
  time python frozen-stream-map.py MS10 80 1.0 gra 0.02 10 0.0
  time python frozen-stream-map.py MS10 40 1.0 gra 0.02 75 0.0 0.6
  time python frozen-stream-map.py MS10 80 1.0 gra 0.02 75 0.0 0.6
#+END_SRC

* Calculating radiative turnaround radius
+ For the well-coupled case, we have
  + R_{\star\star} = 2 \tau_* R_*
  + R_{\star\star} / pc = 0.0393 \kappa_600 L_4 / v_10^2 
+ For the single-grain case we have
  + R_{\star\star} = 2 (\kappa_d/\kappa) \tau_* R_*
+ In II-\S5 we normalize a by \micro{}m and \rho in g/cm^3
  + \kappa_d = Q \pi a^2 / (4 \pi a^3 \rho_d / 3) = 0.75 Q / \rho_d a
  + \kappa_d = 7500 Q / \rho_d a_\micro
+ For a_\micro = 0.02, Q = 1.5, \rho_d = 3 => \kappa_d = 1.875e5
  + => \kappa/\kappa_d = 3.2e-3 \kappa_600
+ Hence single-grain R_{\star\star} / pc = 0.4912 (L_4 / v_10^2) (Q / \rho_d a_\micro)
+ Compare with rip-point radius:
  + R_\dag = v_10 R_* / sqrt(\Xi_\dag)

* Density limits at the velocity threshold 
+ v_min = sqrt(\Xi_\dag \eta_w)
+ If we substitute v = v_min from (28) in (31) we get
  + \tau_{*,max} = 0.5 sqrt(\Xi_\dag \eta_w) /sqrt(\Xi_\dag) = 0.5 \eta_w^0.5
+ And then in (30)
  + \tau_{*,min} = 0.5 (\kappa/\kappa_d) \eta_w^0.5
+ Where \tau_* = 0.0089 \kappa_600 sqrt(L_4 n) / v_{10}
  + = 0.0089 \kappa_600 sqrt(L_4 n / \Xi_\dag \eta_w)
  + => n = 1.26e4 \tau_*^2  \Xi_\dag \eta_w / L_4 \kappa_600^2 
+ So, n_max = 3150 \Xi_\dag \eta_w^2 / L_4 \kappa_600^2
+ And n_min = (\kappa/\kappa_d)^2 n_max
  + So for the 0.02 \micro{}m example from above, we get n_min = 1e-5 n_max, then 1 dex gets used up in the curved corner, so we actually have 4 dex range

* Survey of literature on grain dynamics
Some of this will end up in introduction and/or discussion of Paper II

** Bow shocks
+ Katushkina:2017a, Katushkina:2018a


** Compare Lorentz force and radiation and drag force
+ In the paper, I do everything in terms of Larmor radius, but in order to compare with Katushkina:2018a I need to explicitly consider the Lorentz force
+ We can put it terms of the fiducial force - 2 n k T \pi a^2
+ f_B = z_d e w_\perp B / c
+ \phi = e^2 z_d / a k T => z_d e = a k T \phi / e
+ We can also use r_B = m_d c w_\perp / z_d e B
  + f_B = m_d w_\perp^2 / r_B


** Summary of Katushkina papers

*** Katushkina:2017a
+ Considers *only* Lorentz force on grains
  + No drag, no radiation
+ Initially, w = 0, so no Lorentz force
+ Charge is assumed constant
+ Everything is normalized to R_0 stand-off distance of astropause
+ Parallel and perpendicular B fields
  + Quite low mach numbers: 1.5 in \perp, 1.89 in \parallel
  + Alfven Mach number 1.77, so \beta \sim 1
+ The outer shell is extremely thick in \perp case: R_BS = 5 R_0
+ At BS, gas decelerates, but not dust.
  + Giving non-zero w, which produces Lorentz force and gyration
+ For \perp case, B field is in x direction, and axis is z direction
  + At shock, we get a w_z, which generates gyromotion in y-z plane
  + This gives as oscillation in v_z about the mean decelerating plasma flow
  + Which in turn gives a spatial oscillation in density
    + Gives filaments prependicular to axis
  + Spatial period is v_plasma T_gyro
    + This gets smaller as approach astropause, mainly because v_plasma decreases
+ For \parallel B case, similar mechanism operates in the wings because gas velocity and B field are refracted by BS, so grain inertia means it has component \perp to post-shock gas flow (which runs parallel to B field always)


*** Katushkina:2018a
+ Like the previous paper, but with detailed application to \kappa Cas
  + Uses distribution of dust sizes
  + And calculates emission from grains with radiative equilibrium T
    + Although they have to tweak that a bit
+ Again assumes fixes charge (and rather low)
+ And again seems to not include the radiative force
  + Although they claim that this would repel small grains, so they are only using large ones (a > 0.2 \micro{}m)
  + I suspect that what they have done is to calculate R_{\star\star}
    + Yes, that is consistent with their claim:
      #+BEGIN_QUOTE
      Stellar radiation force is especially important for small dust grains with radii rd ≤ 0.1 μm. These dust grains are swept out far away by the stellar radiation and do not cross the BS. 
      #+END_QUOTE
    + In [[id:BD6436D2-E9A0-4F85-BC6E-5730459F1275][\kappa Cas from Katushkina:2018a]] in [[file:~/Dropbox/dust-wave-case-studies/dust-wave-case-studies.org][file:~/Dropbox/dust-wave-case-studies/dust-wave-case-studies.org]] I have calculated the relevant radii and indeed, you need a > 0.2 micron to cross the bow shock at about 3 pc
      + 
    + /However/, if the grains were not collisionally coupled, then the radiation would become very important near the astropause, even for largish grains
    + It would be like the perpendicular drag-free case in II-\S3.3.1
      + The magnetic field can pull grains in to R < R_{\star\star} on the axis, but they are accelerated to high velocities along the field lines by the radiation force
  + But that is not really relevant, since the grains /should/ be well-coupled, based on the \Xi = 40 that I calculate
    + Rip point would be at R_\dag = 0.31 pc << R_0 = 0.75 pc

*** Critique of Katushkina papers
+ They are wrong to ignore drag force, since it is important:
  + /Olga says they included radiation force./ The radiation force is important at distances less than about 2 R_{\star\star}, which means at the AP (0.75 pc) it is important for all grains < 2 microns
  + The only way that grains can get near R_0 (\ll R_{\star\star}) is by coupling to plasma
    + Pure-magnetic coupling would give a cavity like in my drag-free models
    + More likely there is Coulomb coupling - for \Xi = 20 we get \phi = 8 or U = 7 V
    + They are assuming U \approx 1 V, which is fine for neutral ISM, but not for H II regions 



** Grain destruction mechanisms

*** Sublimation
+ From Fig A1 of Paper III gives U = 1e9 where sublimation becomes important.
+ U = 3.82 n T_4 \Xi
+ So, for DDW, sublimation requires n > 1e9 / 3.82 T_4 \Xi_\dag
+ => n > 2.6e5 pcc
+ On the other hand, we also need \tau_* < \tau_{*,max} for DW
+ => 0.0089 \kappa_600 (L_4 n)^{1/2} / v_10 < 0.5 v_10 / sqrt(\Xi_\dag)
+ => v_10^4 > (0.56 \kappa_600)^2 L_4 n
+ v_10^4 > 8.15e4 \kappa_600^2 L_4
+ v_10 > 16.9 \kappa_600^0.5 L_4^0.25

*** Particle sputtering
+ This is what I have already looked at under the Draine:2011a heading
+ Requires slip velocities above 75 km/s for sputtering by He ions
  + This does not necessarily need v_\infty so high, since w_max = 2-3 v_\infty
+ And need to traverse column density of 2e21 a_\micro cm^-2
+ I got a column of 3e18 cm^-2 from taking \approx 10 n R_\dag
  + Factor of 10 comes from multiple crossings or lingering at equilibrium drift
+ This means that grains smaller than 0.0015 micron = 1.5 nm would be destroyed by sputtering

*** Photosputtering
+ energy of He ion at 75 km/s = 117 eV = 8.6 Ryd = 106 \AA = 0.1 keV
+ So this is hard to get from an O star
+ For the 40 Msun model, the cloudy output says
  + L = 2.22e5 Lsun = 8.48e38 erg/s
  + L(X-ray) = 6.435e29 erg/s  = 1.6e-4 Lsun - very low!
    + But the wind will have a higher luminosity
    + Order 1e-7 L_* = 0.022 Lsun
    + Even higher in th1C: 1 Lsun
  + Q(4-20 Ryd) = 7.14e42 /s
    + This implies L \approx 6.23e32 = 0.16 Lsun
    + But some presumably is in the 4-8 Ryd = 60-120 eV range that might not be enough for photosputtering
+ Yields for He+ sputtering are order Y = 0.01 to 0.1 so we can assume same for photo-sputtering
+ From my Henney:2010a paper I have
  + F_ab = F_phot Q_abs Y is ablative particle flux
  + Mdot = \pi a^2 F_phot Q_abs Y m_ab
  + We can assume m_ab(Si) = 28 m_p
  + So destruction timescale: t = m_d / Mdot
  + t = (4 \pi / 3) a^3 \rho_d / \pi a^2 F_phot Q_abs Y m_ab
    + Put \rho_d in g/cm^3; L_X in L_\odot; R in pc and assume 120 eV
    + F_phot = 2.09e6 L_X R_pc^-2 /cm^2
  + t = (430 yr) a_\mu \rho_d R_pc^2 / L_X Q_abs Y
  + This is really short!
    + If we put L_X = 1e4 1e-7 X_-7 L_4, then we can multiply by 1000
    + t = (4.3e5 yr) a_\mu \rho_d R_pc^2 / L_4 X_-7 Q_abs Y
+ But I am no longer convinced that photo-sputtering will happen
  + X-rays should deposit energy by ejecting inner shell electrons
  + So drop it

*** Radiative torques
+ First proposed by Dolginov:1976a
+ Draine:1996b did numerical simulations with DDSCAT
+ Lazarian:2007a found that grain helicity was the important factor
+ What I don't understand is that Lazarian:2007a talk about both low-J and high-J attractors in phase space
  + But Hoang:2018a don't mention the low-J ones, which presumably correspond to not spinning very fast
  + They do say that the high-J states are more robust because they aren't affected by thermal fluctuations
+ Tensile strength S_max is 1e9 erg/cm^3 in Hoang:2018a
  + But other sources say 1e10
+ In my calculations below ([[id:59F20EBD-7A63-4448-A5AF-C7B4D36B8CBC][Dust decoupling in H II regions]]) I went round in circles a bit
+ We need to find two things
  1. Critical size of grain, above which RATD will break it up in a radiation field U
  2. Check that timescale is less than R/v
+ Hoang:2018a Eq [27] gives min radiation field for disruption, which is steep function of size
  + U_disr \approx 118 a_-5^-8.1 \lambda_0.5^5.1 S_9^1.5
+ We can re-write this to give a size limit
  + a_-5 \approx 1.80 U^-0.123 \lambda_0.5^0.630 S_9^0.185
  + Assume peak wavelength around 0.1 micron, and S = 1e10 instead of 1e9, then we get
    + a_-5 \approx 1.00 U^-0.123
  + We have U = 3.82 n T_4 \Xi, so putting \Xi = 1000 we get U = 3820 n
    + a_-5 \approx 0.363 n^-0.123
  + In outer parts of H II regions we have \Xi \sim 1 => U = 3.82 n
    + maximum about 0.1 micron there
+ Check timescale
  + From below I have
    + t = 4.23e6 a_-5^-0.7 (\rho_d/3) S_9^0.5  \lambda_0.5^1.7 (U_6/1.2)^-1 \gamma^-1 s
    + Put S_9 = 10, \lambda_0.5 = 0.3, then we have
    + t = (6.57e4 yr) a_-5^-0.7 U^-1
    + t = (17.2 yr) a_-5^-0.7 n^-1
  + As before, the timescales are very short
    + less than 100 years in all cases
+ *Conclusions for RATD*
  + Any grain larger than 0.04 micron will be rapidly destroyed



** DONE Dust decoupling in H II regions
CLOSED: [2019-03-22 Fri 18:35]
:PROPERTIES:
:ID:       59F20EBD-7A63-4448-A5AF-C7B4D36B8CBC
:END:
+ Gail:1979a
  + Has decoupling due to low grain charge
+ Draine:2011a
  + Although mainly assumes coupling, he does talk about drift
  + Also gives good history from Kahn:1954a onwards
    + Should check out Matthews:1967a and Matthews:1969a
    + Dopita:2003a, Dopita:2006a should not be forgotten
  + Fig 8 turns out to be equivalent of our Cloudy graphs - drift velocity versus distance, showing discontinuity at sonic drift speeds
  + Also considers Lorentz forces in sec 4.2
  + Sec 4.3 considers drift timescales
  + Finds that in dense regions, drift can remove grains fast enough to maybe change dust-gas ratio
  + Sputtering (sec 4.4) is interesting - shows that drift velocities > 75 km/s can lead to dust destruction by He ions
    + But needs to traverse a column density of 2e20 a_-5 cm^-2
    + a_-5 is grain size in units of 0.1 micron = 100 nm = 1000 \AA
    + Whereas in our models, column will be of order n R_\dag or n v_\infty t
      - In our Fig 15 we have equilibrium drift for about 2000 years (w = 80), which follows decoupling for 500 years with (w = 80 to 200)
      - v_\infty = 80 km/s and n = 10 => column = 6.3e18 cm^-2 
      - This is for a = 0.02 \micro{}m so sputtering column is 4e19 cm^-2
      - So, such grains will not be destroyed in dust wave
      - For the v_\infty = 40 km/s we get pulses where w > 75 km/s
        - But there are only two of them with durations about 500 yr
          each (roughly half of each duty cycle)
      - Putting in numbers, R_\dag = v_10 \Xi_\dag^{-1/2} R_* => n R_\dag = n v_10 R_* \Xi_\dag^{-1/2}
        - R_*/pc = 2.21 sqrt(L_4/n) / v_10
        - => column = 2.21 sqrt(L_4 n / \Xi_\dag) pc = 2.15e17 sqrt(L_4 n)
        - That probably needs to get multiplied by 1/sin\theta_B to account for the magnetically pinned lingering, which would make it consistent with what I got from the graphs
          - => 3.1e18, which is close enough to the 6e18 I got above
      - *Conclusion* Sputtering only important for grains smaller than about a_\micro = 0.001 sqrt(L_4 n)
        - We can combine this with other restrictions
        - v_10 > sqrt(\eta_w \Xi_\dag)
        - \tau_* > 0.5 \kappa/\kappa_d sqrt(\eta_w)
        - \tau_* = 0.0089 κ_600 sqrt(L4 n) / v_10
+ Akimkin:2015a, Akimkin:2017a
  + In Akimkin:2017a they find that dust decouples from the gas in inner zone of H II region, allowing gas to fill in the hole that occurs in models that assume perfect coupling (Draine:2011a, Akimkin:2015a)
  + The decoupling is more pronounced for lower effective T, which is the equivalent of our finding that \Xi_\dag is lower for B stars than for O stars due to less effective grain charging.
  + One shortcoming of their simulations is that they assume that the grain can instantaneously achieve the equilibrium drift velocity given by the local conditions
    + Acceleration length: s = w^2 / a
    + Compare with radius of rip: R_\dag
      + \Xi = (L / 4 \pi R^2 c) / (2 n k T)
      + R = sqrt( L / 4 \pi c 2 n k T \Xi )
    + a = L \kappa_d / 4 \pi R^2 c
      + \Xi = (a / \kappa_d) / \rho c^2
      + => accel at rip point a_\dag = \kappa_d \rho c_s^2 \Xi_\dag
      + accel length at rip point s_\dag = (w^2/c_s^2) / \kappa_d \rho \Xi_\dag
    + R_\dag = sqrt( L / 4 \pi c \rho c_s^2 \Xi_\dag)
    + We can define a thermal R_*, which is where radiation pressure = gas pressure
    + R_*^therm = sqrt( L / 4 \pi c \rho c_s^2) = 2.21 sqrt(L_4/n) if c_s = 10 km/s
    + So R_\dag = R_*^therm \Xi_\dag^{-1/2}
    + Therefore s_\dag / R_\dag = (w^2/c_s^2) / \kappa_d \rho R_*^therm \Xi_\dag^{1/2}
    + On average \kappa_d = \kappa / Z_d, so \kappa_d \rho R_*^therm = \tau_*^therm / Z_d
    + \tau_*^therm = 0.0089 \kappa_600 sqrt(L_4 n)
    + Finally:
      + s_\dag / R_\dag = (w^2/c_s^2) Z_d / \tau_*^therm \Xi_\dag^{1/2}
      + So, taking \Xi_\dag = 1000, Z_d = 0.01, (w^2/c_s^2) = 10 we get
        + s_\dag / R_\dag \approx 10 0.01 / 0.0089 sqrt(1000) = 0.355 / \kappa_600 sqrt(L_4 n)
    + /Conclusion/  inertial effects s_\dag and R_\dag are of same order

+ Ishiki:2018a
+ Hoang:2018a
  + [ ] RATD - work out timescale to see if it could work
    + Things are given in terms of U
    + We have U = 3.82 n T_4 \Xi
      + U_\dag \approx 3800 n
      + Check for consistency
        + Hoang uses u_isrf = 8.64e-13 erg/cm^3 => c u_isrf = 0.0259
        + This is close enough to the 0.0217 from MMP83
    + RATD timescale Hoang:2018b eq (31) is 1e5 U^-1 S_{max,7}^{1/2} a_{-5}^{-0.7} yr
    + So, if we have U = 1e4 then this is 10 yr - very short!
    + Problem then is that RATD would destroy grains before they got to dust wave
    + But that is for composite grains, that have low strength S_max = 1e7 erg/cm^3
    + Hoang:2018a have 1e9 as a typical value for polycrystalline grains
      + Diamond has 1e11
    + Assuming FIR damping dominates, we have disruption threshold of U
      + U > 118 \gamma^-3 a_-5^-8.1 \lambda_0.5^5.1 S_9^1.5
      + Where \gamma measures anisotropy of radiation
        + \gamma = 1 for unidirectional 
      + And \lambda_0.5 is max of stellar spectrum, so should be about 0.15 micron for O stars, so \lambda_0.5 = 0.3
      + Hence U > 0.254 a_-5^-8.1 S_9^1.5
      + Or a_-5 = (4 U)^-0.123 or a_nm = 100 (4 U)^-0.123 S_9^0.185
        |    U | a_max (nm) | t, yr |   R_pc |
        |------+-----------+-------+-------|
        |    1 |    84.323 | 3.5e6 | 3.834 |
        |   10 |    63.525 | 4.3e5 | 1.212 |
        |  100 |    47.857 | 5.3e4 | 0.383 |
        | 1000 |    36.053 | 6.4e3 | 0.121 |
        |  1e4 |    27.161 | 7.9e2 | 0.038 |
        |  1e5 |    20.462 | 9.6e1 | 0.012 |
        |  1e6 |    15.415 | 1.2e1 | 0.004 |
        #+TBLFM: $2=100 (4 $1)**-0.123 ;f3::$3=3.52e6 $1**(-0.912666) ; s2::$4=sqrt(14.7 /$1);f3
      + Spin up time \approx damping time
        + \tau_damp = 2.2e5 a_-5^2 U^{-2/3} yr
          + This is a mistake in text, which gives U^{2/3} 
        + Putting in the maximum a from above, we get
          + \tau_damp = 3.52e6 U^{-0.912666} yr
      + Dynamic time is R/v_\infty for general distance
        + U = 14.7 L_4 / R_pc^2
          + R_pc = sqrt(U/ 14.7 L_4)
        + So putting that in above: \tau_damp = 3.02e5 R_pc^1.825 / L_4^0.913 yr
        + t_d = 9.78e4 R_pc / v_10 yr
          + t_d = 2.55e5 sqrt(U_2/L_4) / v_10 yr
      + So, spin up is slower than dynamic time at large distances
        + Equal when R_pc^0.825 = 0.324 L_4^0.913 / v_10
        + R_pc = 0.255 L_4^1.1 / v_10^1.21
        + This is quite large compared with typical bow radii
      + Dynamic time at rip point is is R_\dag/v_\infty
        + R_\dag = v_10 \Xi_\dag^{-1/2} R_*
        + R_*/pc = 2.21 sqrt(L_4/n) / v_10
        + => R_\dag = 2.21 sqrt(L_4/n \Xi_\dag) pc
        + t = 2.16e5 sqrt(L_4/n \Xi_\dag) / v_10 yr
      + We could redo this at constant grain size - might be clearer
      + We can't use damping time now, since that is time to spin up to equilibrium frequency, which will be much much faster than break-up for large grains
      + Instead, we have from eq (30)
        + \omega_dis / 2 \pi = 5.8e8 a_-5^-1 S_9^0.5 per second
        + t = I \omega_dis / \Gamma_RAT
        + I = 8 \pi \rho a^5 / 15 = 5.03e-25 \rho hat a_-5^5 where \rho hat = \rho / 3 g cm^-3 
        + \Gamma_RAT = π a^2 γ u_rad (\lambda bar/2π) Q_Γ
          + \lambda \approx 1000 \AA
          + Q_\Gamma = 2 (\lambda bar / a)^-2.7 for a < \lambda bar / 1.8
          + Q_\Gamma = 0.4 for a >  \lambda bar / 1.8
          + So \Gamma_RAT = 6.9e-23 a_-5^4.7 \gamma \lambda_0.5^-1.7 (U_6/1.2) for small grains, a < \lambda bar / 1.8
          + I agree with this, except I get a coefficient of 6.72e-23
        + This gives t \propto a^5 a^-1 / a^4.7 \propto a^-0.7 and \propto \rho S_9^0.5  \lambda_0.5^1.7 (U_6/1.2)^-1 \gamma^-1
          + t = 4.23e6 a^-0.7 \rho hat S_9^0.5  \lambda_0.5^1.7 (U_6/1.2)^-1 \gamma^-1 s
          + 4.23e6 s = 49 days
          + Hoang:2018a has 307 days and  \lambda_0.5^2.7  - not sure why the difference
          + Putting it in years and with U_2 = U/100 we have
            + t = 1.2 4.23e6 / 1e-4 yr = (1600 yrs) a^-0.7 S_9^0.5  \lambda_0.5^1.7 U_2^-1
            + Or with  \lambda_0.5 = 0.2, t = 100 S_9^0.5 U_2^-1 years
        + Table
          |    U | t(2 \micro), yr | t(0.2 \micro), yr | t(0.02 \micro), yr |
          |------+------------+--------------+---------------|
          |    1 |     1.23e3 |       6.16e3 |        3.09e4 |
          |   10 |     1.23e2 |       6.16e2 |        3.09e3 |
          |  100 |     1.23e1 |       6.16e1 |        3.09e2 |
          | 1000 |     1.23e0 |       6.16e0 |        3.09e1 |
          |  1e4 |    1.23e-1 |      6.16e-1 |        3.09e0 |
          |  1e5 |    1.23e-2 |      6.16e-2 |       3.09e-1 |
          #+TBLFM: $2=100 20**-0.7 100/ $1;s3::$3=100 2**-0.7 100/ $1;s3::$4=100 0.2**-0.7 100/ $1;s3
      + These are very short t < 100 years to destroy 2 micron grain at U > 10
+ Size dependence
  + Everyone finds that it is larger grains that can be swept out of H II regions
  + But in  our case, it is not so simple - larger grains have more inertia, so just carry on careening into the bow shock, even after rip 
** Dust decoupling in the ISM and molecular clouds
In molecular clouds: \citep{Hopkins:2016a, Lee:2017a} say they
decouple. \citet{Tricco:2017a} says they don't.  But then
\citet{Mattsson:2019a} say they do.

** Resonant Drag Instability
+ Squire:2018a
  + RDI occurs when w projected along any direction is equal to phase speed of some wave
  + So occurs whenever w > c_s
  + Or in MHD case, for any w at all (Hopkins:2018a)
+ Hopkins:2018c consider several different drag laws, including the Coulomb one
  + They talk about a "decoupling instability" sec 3.3
    + This is when coupling becomes weaker as slip velocity increases
    + As is case for superthermal coulomb drag
  + But they dismiss it 
    #+BEGIN_QUOTE
    however, in this regime Coulomb drag will never real- istically dominate over Epstein or Stokes drag, so we do not expect this instability to be physically relevant.
    #+END_QUOTE
  + They are wrong about this if the grain potential is high enough
    + Except I think that in that paper they are talking about cases when Lorentz force is unimportant, so maybe they were not wrong
+ Hopkins:2018a talk more about charged grains
  + Their sec 9.1.4 talks about drift velocities under radiation forces
    + w_drift ~ t_s a where a is acceleration and t_s is stopping time from drag
    + They give w/c = Q_abs e_rad/e_therm
    + Where e_rad/e_therm is basically the same as my \Xi
    + They say it is 800 L_6  / R_pc^2 T_4 n which looks about right
    + In 9.1.5 they say
      #+BEGIN_QUOTE
      If the drift is super-sonic, Epstein drag always dominates Coulomb,
      #+END_QUOTE
      + But this is only true if they are talking about equilibrium drift
      + And even then, there is the electron coulomb drag, which can dominate in the supersonic regime if \phi  > 10
    + In 9.2.3 they talk about different instability regimes in H II regions
      + Critical radius that divides subsonic from supersonic drift
      + This is r_pc = 0.5 L_6^{1/2} n^{−1/2}, which means \Xi = 3200
      + So this is the rip point!
      + They refer to Draine:2011a and Akimkin:2015a to back this up
    + So this means that the rip point is not something new, exactly
